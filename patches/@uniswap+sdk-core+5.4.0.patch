diff --git a/node_modules/@uniswap/sdk-core/dist/chains.d.ts b/node_modules/@uniswap/sdk-core/dist/chains.d.ts
index 45d6e6c..96f048f 100644
--- a/node_modules/@uniswap/sdk-core/dist/chains.d.ts
+++ b/node_modules/@uniswap/sdk-core/dist/chains.d.ts
@@ -22,9 +22,19 @@ export declare enum ChainId {
     ZORA_SEPOLIA = 999999999,
     ROOTSTOCK = 30,
     BLAST = 81457,
-    ZKSYNC = 324
+    ZKSYNC = 324,
+    ABSTRACT_TESTNET = 11124,
+    ABSTRACT_MAINNET = 2741,
+    ZERO = 543210,
+    BOB = 60808,
+    CYBER = 7560,
+    SHAPE = 360,
+    INK = 57073,
+    REDSTONE_GARNET = 17069,
+    REDSTONE = 690,
+    ANIME_TESTNET = 6900
 }
-export declare const SUPPORTED_CHAINS: readonly [ChainId.MAINNET, ChainId.OPTIMISM, ChainId.OPTIMISM_GOERLI, ChainId.OPTIMISM_SEPOLIA, ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI, ChainId.ARBITRUM_SEPOLIA, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.GOERLI, ChainId.SEPOLIA, ChainId.CELO_ALFAJORES, ChainId.CELO, ChainId.BNB, ChainId.AVALANCHE, ChainId.BASE, ChainId.BASE_GOERLI, ChainId.ZORA, ChainId.ZORA_SEPOLIA, ChainId.ROOTSTOCK, ChainId.BLAST, ChainId.ZKSYNC];
+export declare const SUPPORTED_CHAINS: readonly [ChainId.MAINNET, ChainId.OPTIMISM, ChainId.OPTIMISM_GOERLI, ChainId.OPTIMISM_SEPOLIA, ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI, ChainId.ARBITRUM_SEPOLIA, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.GOERLI, ChainId.SEPOLIA, ChainId.CELO_ALFAJORES, ChainId.CELO, ChainId.BNB, ChainId.AVALANCHE, ChainId.BASE, ChainId.BASE_GOERLI, ChainId.ZORA, ChainId.ZORA_SEPOLIA, ChainId.ROOTSTOCK, ChainId.BLAST, ChainId.ZKSYNC, ChainId.ABSTRACT_TESTNET, ChainId.ZERO, ChainId.BOB, ChainId.CYBER, ChainId.SHAPE, ChainId.INK, ChainId.REDSTONE_GARNET, ChainId.REDSTONE, ChainId.ABSTRACT_MAINNET, ChainId.ANIME_TESTNET];
 export declare type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number];
 export declare enum NativeCurrencyName {
     ETHER = "ETH",
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js
index 3bbaa7b..ed3326d 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js
@@ -98,8 +98,18 @@ function _setPrototypeOf(o, p) {
   ChainId[ChainId["ROOTSTOCK"] = 30] = "ROOTSTOCK";
   ChainId[ChainId["BLAST"] = 81457] = "BLAST";
   ChainId[ChainId["ZKSYNC"] = 324] = "ZKSYNC";
+  ChainId[ChainId["ABSTRACT_TESTNET"] = 11124] = "ABSTRACT_TESTNET";
+  ChainId[ChainId["ABSTRACT_MAINNET"] = 2741] = "ABSTRACT_MAINNET";
+  ChainId[ChainId["ZERO"] = 543210] = "ZERO";
+  ChainId[ChainId["BOB"] = 60808] = "BOB";
+  ChainId[ChainId["CYBER"] = 7560] = "CYBER";
+  ChainId[ChainId["SHAPE"] = 360] = "SHAPE";
+  ChainId[ChainId["INK"] = 57073] = "INK";
+  ChainId[ChainId["REDSTONE_GARNET"] = 17069] = "REDSTONE_GARNET";
+  ChainId[ChainId["REDSTONE"] = 690] = "REDSTONE";
+  ChainId[ChainId["ANIME_TESTNET"] = 6900] = "ANIME_TESTNET";
 })(exports.ChainId || (exports.ChainId = {}));
-var SUPPORTED_CHAINS = [exports.ChainId.MAINNET, exports.ChainId.OPTIMISM, exports.ChainId.OPTIMISM_GOERLI, exports.ChainId.OPTIMISM_SEPOLIA, exports.ChainId.ARBITRUM_ONE, exports.ChainId.ARBITRUM_GOERLI, exports.ChainId.ARBITRUM_SEPOLIA, exports.ChainId.POLYGON, exports.ChainId.POLYGON_MUMBAI, exports.ChainId.GOERLI, exports.ChainId.SEPOLIA, exports.ChainId.CELO_ALFAJORES, exports.ChainId.CELO, exports.ChainId.BNB, exports.ChainId.AVALANCHE, exports.ChainId.BASE, exports.ChainId.BASE_GOERLI, exports.ChainId.ZORA, exports.ChainId.ZORA_SEPOLIA, exports.ChainId.ROOTSTOCK, exports.ChainId.BLAST, exports.ChainId.ZKSYNC];
+var SUPPORTED_CHAINS = [exports.ChainId.MAINNET, exports.ChainId.OPTIMISM, exports.ChainId.OPTIMISM_GOERLI, exports.ChainId.OPTIMISM_SEPOLIA, exports.ChainId.ARBITRUM_ONE, exports.ChainId.ARBITRUM_GOERLI, exports.ChainId.ARBITRUM_SEPOLIA, exports.ChainId.POLYGON, exports.ChainId.POLYGON_MUMBAI, exports.ChainId.GOERLI, exports.ChainId.SEPOLIA, exports.ChainId.CELO_ALFAJORES, exports.ChainId.CELO, exports.ChainId.BNB, exports.ChainId.AVALANCHE, exports.ChainId.BASE, exports.ChainId.BASE_GOERLI, exports.ChainId.ZORA, exports.ChainId.ZORA_SEPOLIA, exports.ChainId.ROOTSTOCK, exports.ChainId.BLAST, exports.ChainId.ZKSYNC, exports.ChainId.ABSTRACT_TESTNET, exports.ChainId.ZERO, exports.ChainId.BOB, exports.ChainId.CYBER, exports.ChainId.SHAPE, exports.ChainId.INK, exports.ChainId.REDSTONE_GARNET, exports.ChainId.REDSTONE, exports.ChainId.ABSTRACT_MAINNET, exports.ChainId.ANIME_TESTNET];
 (function (NativeCurrencyName) {
   // Strings match input for CLI
   NativeCurrencyName["ETHER"] = "ETH";
@@ -129,12 +139,12 @@ var UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AF
  * @deprecated use V2_FACTORY_ADDRESSES instead
  */
 var V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
-var V2_FACTORY_ADDRESSES = (_V2_FACTORY_ADDRESSES = {}, _V2_FACTORY_ADDRESSES[exports.ChainId.MAINNET] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[exports.ChainId.GOERLI] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[exports.ChainId.SEPOLIA] = '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0', _V2_FACTORY_ADDRESSES[exports.ChainId.OPTIMISM] = '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf', _V2_FACTORY_ADDRESSES[exports.ChainId.ARBITRUM_ONE] = '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9', _V2_FACTORY_ADDRESSES[exports.ChainId.AVALANCHE] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[exports.ChainId.BASE] = '0x8909dc15e40173ff4699343b6eb8132c65e18ec6', _V2_FACTORY_ADDRESSES[exports.ChainId.BNB] = '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6', _V2_FACTORY_ADDRESSES[exports.ChainId.POLYGON] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[exports.ChainId.CELO] = '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f', _V2_FACTORY_ADDRESSES[exports.ChainId.BLAST] = '0x5C346464d33F90bABaf70dB6388507CC889C1070', _V2_FACTORY_ADDRESSES);
+var V2_FACTORY_ADDRESSES = (_V2_FACTORY_ADDRESSES = {}, _V2_FACTORY_ADDRESSES[exports.ChainId.MAINNET] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[exports.ChainId.GOERLI] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[exports.ChainId.SEPOLIA] = '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0', _V2_FACTORY_ADDRESSES[exports.ChainId.OPTIMISM] = '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf', _V2_FACTORY_ADDRESSES[exports.ChainId.ARBITRUM_ONE] = '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9', _V2_FACTORY_ADDRESSES[exports.ChainId.AVALANCHE] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[exports.ChainId.BASE] = '0x8909dc15e40173ff4699343b6eb8132c65e18ec6', _V2_FACTORY_ADDRESSES[exports.ChainId.BNB] = '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6', _V2_FACTORY_ADDRESSES[exports.ChainId.POLYGON] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[exports.ChainId.CELO] = '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f', _V2_FACTORY_ADDRESSES[exports.ChainId.BLAST] = '0x5C346464d33F90bABaf70dB6388507CC889C1070', _V2_FACTORY_ADDRESSES[exports.ChainId.ABSTRACT_TESTNET] = '0xcD87b21B627cB2d695FBc2101cf64F8007F25E07', _V2_FACTORY_ADDRESSES[exports.ChainId.ZERO] = '0x1B4427e212475B12e62f0f142b8AfEf3BC18B559', _V2_FACTORY_ADDRESSES[exports.ChainId.CYBER] = '0x8AdDa31FE63696Ac64DED7D0Ea208102b1358c44', _V2_FACTORY_ADDRESSES[exports.ChainId.SHAPE] = '0xb411eAF2f2070822B26E372E3Ea63c5060BA45E6', _V2_FACTORY_ADDRESSES[exports.ChainId.INK] = '0xfe57A6BA1951F69aE2Ed4abe23e0f095DF500C04', _V2_FACTORY_ADDRESSES[exports.ChainId.ABSTRACT_MAINNET] = '0x566d7510dEE58360a64C9827257cF6D0Dc43985E', _V2_FACTORY_ADDRESSES[exports.ChainId.ANIME_TESTNET] = '0x69f2888491eA07BB10936aA110A5E0481122efd3', _V2_FACTORY_ADDRESSES);
 /**
  * @deprecated use V2_ROUTER_ADDRESSES instead
  */
 var V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
-var V2_ROUTER_ADDRESSES = (_V2_ROUTER_ADDRESSES = {}, _V2_ROUTER_ADDRESSES[exports.ChainId.MAINNET] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[exports.ChainId.GOERLI] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[exports.ChainId.ARBITRUM_ONE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.OPTIMISM] = '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2', _V2_ROUTER_ADDRESSES[exports.ChainId.BASE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.AVALANCHE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.BNB] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.POLYGON] = '0xedf6066a2b290c185783862c7f4776a2c8077ad1', _V2_ROUTER_ADDRESSES[exports.ChainId.BLAST] = '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035', _V2_ROUTER_ADDRESSES);
+var V2_ROUTER_ADDRESSES = (_V2_ROUTER_ADDRESSES = {}, _V2_ROUTER_ADDRESSES[exports.ChainId.MAINNET] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[exports.ChainId.GOERLI] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[exports.ChainId.ARBITRUM_ONE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.OPTIMISM] = '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2', _V2_ROUTER_ADDRESSES[exports.ChainId.BASE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.AVALANCHE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.BNB] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[exports.ChainId.POLYGON] = '0xedf6066a2b290c185783862c7f4776a2c8077ad1', _V2_ROUTER_ADDRESSES[exports.ChainId.BLAST] = '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035', _V2_ROUTER_ADDRESSES[exports.ChainId.ABSTRACT_TESTNET] = '0x96ff7D9dbf52FdcAe79157d3b249282c7FABd409', _V2_ROUTER_ADDRESSES[exports.ChainId.ZERO] = '0xD7C05A08cB43e99d596B606A1c03EA2F21289d94', _V2_ROUTER_ADDRESSES[exports.ChainId.CYBER] = '0x58C90b5Dbc69963Fb0CAbee1163747FDBB7A8b18', _V2_ROUTER_ADDRESSES[exports.ChainId.SHAPE] = '0x1f79AD8a85f570514e06Ff51BBffD540cCaB1249', _V2_ROUTER_ADDRESSES[exports.ChainId.INK] = '0xB3FB126ACDd5AdCA2f50Ac644a7a2303745f18b4', _V2_ROUTER_ADDRESSES[exports.ChainId.ABSTRACT_MAINNET] = '0xad1eCa41E6F772bE3cb5A48A6141f9bcc1AF9F7c', _V2_ROUTER_ADDRESSES[exports.ChainId.ANIME_TESTNET] = '0x4F9f253Cc262fC82baD2d25BC1Ea7c67544535e3', _V2_ROUTER_ADDRESSES);
 // Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon
 var DEFAULT_ADDRESSES = {
   v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
@@ -298,7 +308,98 @@ var ZKSYNC_ADDRESSES = {
   tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',
   swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3'
 };
-var CHAIN_TO_ADDRESSES_MAP = (_CHAIN_TO_ADDRESSES_M = {}, _CHAIN_TO_ADDRESSES_M[exports.ChainId.MAINNET] = MAINNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM] = OPTIMISM_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_ONE] = ARBITRUM_ONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.POLYGON] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.POLYGON_MUMBAI] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.GOERLI] = GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.CELO] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.CELO_ALFAJORES] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BNB] = BNB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM_GOERLI] = OPTIMISM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM_SEPOLIA] = OPTIMISM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_GOERLI] = ARBITRUM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_SEPOLIA] = ARBITRUM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.SEPOLIA] = SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.AVALANCHE] = AVALANCHE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BASE] = BASE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BASE_GOERLI] = BASE_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZORA] = ZORA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZORA_SEPOLIA] = ZORA_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ROOTSTOCK] = ROOTSTOCK_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BLAST] = BLAST_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZKSYNC] = ZKSYNC_ADDRESSES, _CHAIN_TO_ADDRESSES_M);
+var ABSTRACT_TESTNET_ADDRESSES = {
+  v3CoreFactoryAddress: '0x2E17FF9b877661bDFEF8879a4B31665157a960F0',
+  multicallAddress: '0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8',
+  quoterAddress: '0xdE41045eb15C8352413199f35d6d1A32803DaaE2',
+  v3MigratorAddress: '0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed',
+  nonfungiblePositionManagerAddress: '0x069f199763c045A294C7913E64bA80E5F362A5d7',
+  tickLensAddress: '0x2EC62f97506E0184C423B01c525ab36e1c61f78A',
+  swapRouter02Address: '0xb9D4347d129a83cBC40499Cd4fF223dE172a70dF'
+};
+var ZERO_ADDRESSES = {
+  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',
+  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',
+  quoterAddress: '0x22B98c8Bdfea8D928101eEC40Af634ff37804997',
+  v3MigratorAddress: '0x05eead9625966847d60774Cf2c3b004AfBC45314',
+  nonfungiblePositionManagerAddress: '0x5b15468dFD83cF9192082d4510034c9431bb05eB',
+  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',
+  swapRouter02Address: '0xD936711eABD2Ce52747d7122757316C7DFe3599b'
+};
+var BOB_ADDRESSES = {
+  v3CoreFactoryAddress: '0xcb2436774C3e191c85056d248EF4260ce5f27A9D',
+  multicallAddress: '0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435',
+  quoterAddress: '0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA',
+  // Missing migrator address for BOB, using a place holder for now
+  v3MigratorAddress: '0x0000000000000000000000000000000000000000',
+  nonfungiblePositionManagerAddress: '0x743E03cceB4af2efA3CC76838f6E8B50B63F184c',
+  tickLensAddress: '0xB3309C48F8407651D918ca3Da4C45DE40109E641',
+  swapRouter02Address: '0x807F4E281B7A3B324825C64ca53c69F0b418dE40'
+};
+var CYBER_ADDRESSES = {
+  v3CoreFactoryAddress: '0x9701158fcF072c6852FD83B54D237e0cf5910C08',
+  multicallAddress: '0x906d6eB9CF8f64e100e44f8f491b833a8d40B530',
+  quoterAddress: '0xb7493d86A83eb7e4b57A3747013AaE82c907A58E',
+  v3MigratorAddress: '0xc4D8Afb323C316DD7c91ddd4f818d5aCCd0661E3',
+  nonfungiblePositionManagerAddress: '0xa5005349B7dcD9536832D97235675EF5Ae40f095',
+  tickLensAddress: '0x6cb5504B957625d01a88db4b27EAaFD5Ae4422b6',
+  swapRouter02Address: '0xdB4f0Db998BC1d429499fB11638fd3705E8e60Cc'
+};
+var SHAPE_ADDRESSES = {
+  v3CoreFactoryAddress: '0xeCf9288395797Da137f663a7DD0F0CDF918776F8',
+  multicallAddress: '0x356A450B32f5030ae7083702b86FaFbBe7490411',
+  quoterAddress: '0x5C5D397c5C5146559B709534dCDD81cB66617bBF',
+  v3MigratorAddress: '0x584d740230343ED1Ac23A54Dc13f0a5213d5A2B4',
+  nonfungiblePositionManagerAddress: '0xD29D14d0DbE2485E9f89305d5310CcD0D7a6DCb6',
+  tickLensAddress: '0x4372c608a10b760C12E82029E5D4445721Cf4A51',
+  swapRouter02Address: '0x32f6dCB405376B07b9D3d4C03015A5e329dD7D18'
+};
+var INK_ADDRESSES = {
+  v3CoreFactoryAddress: '0x640887A9ba3A9C53Ed27D0F7e8246A4F933f3424',
+  multicallAddress: '0xA0fCec583AeE6176527C07B198e5561722332014',
+  quoterAddress: '0x96b572D2d880cf2Fa2563651BD23ADE6f5516652',
+  v3MigratorAddress: '0xdce28D2D5392e19091Fe59d9750B3202EbE80641',
+  nonfungiblePositionManagerAddress: '0xC0836E5B058BBE22ae2266e1AC488A1A0fD8DCE8',
+  tickLensAddress: '0x3e6Dba802d62aba2361Dd632fbC9f547AA6789aE',
+  swapRouter02Address: '0x177778F19E89dD1012BdBe603F144088A95C4B53'
+};
+var REDSTONE_GARNET_ADDRESSES = {
+  v3CoreFactoryAddress: '0x338F6033D373F610510e0F285637Ef5DDA776742',
+  multicallAddress: '0x320776fE9c8bed28dd6545A7B8e66114b7217153',
+  quoterAddress: '0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e',
+  v3MigratorAddress: '0x32d8273909300339d01c097E3A79eA522C0CCb47',
+  nonfungiblePositionManagerAddress: '0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9',
+  tickLensAddress: '0xe0e63e8a518b001A36FF8ac9F910CeC699D79c5A',
+  swapRouter02Address: '0xfB60447BF76d38A36A140a0e427C3f0787Eb3e80'
+};
+var REDSTONE_ADDRESSES = {
+  v3CoreFactoryAddress: '0xece75613Aa9b1680f0421E5B2eF376DF68aa83Bb',
+  multicallAddress: '0xd57B52452a0FDfE3ff8e0A40Bd10D00D0bfe0723',
+  quoterAddress: '0x2986d9721A49838ab4297b695858aF7F17f38014',
+  v3MigratorAddress: '0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9',
+  nonfungiblePositionManagerAddress: '0x6Cdd7Ad7a1CacCe6163ed26BBA22E0A04dF41AD8',
+  tickLensAddress: '0x600749AA1c493aB8656AD3aeFd2Fd645C7Ba2CdA',
+  swapRouter02Address: '0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e'
+};
+var ABSTRACT_MAINNET = {
+  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',
+  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',
+  quoterAddress: '0x728BD3eC25D5EDBafebB84F3d67367Cd9EBC7693',
+  v3MigratorAddress: '0x117Fc8DEf58147016f92bAE713533dDB828aBB7e',
+  nonfungiblePositionManagerAddress: '0xfA928D3ABc512383b8E5E77edd2d5678696084F9',
+  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',
+  swapRouter02Address: '0x7712FA47387542819d4E35A23f8116C90C18767C'
+};
+var ANIME_TESTNET = {
+  v3CoreFactoryAddress: '0xE6eA2A148c13893a8eEDD57c75043055a8924C5f',
+  multicallAddress: '0x208960B3Bb6fa00bDcfa2cc9CdB8D412bbCe9f64',
+  quoterAddress: '0x623d6b580eAeCbfC22E3ced2233D5598CBBC37F0',
+  v3MigratorAddress: '0xc738ADA94944EC1d86C09c7204A428de35fb1CbF',
+  nonfungiblePositionManagerAddress: '0x1cFbE77bb62CEca3778769655dEEC3ECC6AaaDf7',
+  tickLensAddress: '0x086cD67c39646E95C1B9c4af4694Aa51A1a7636f',
+  swapRouter02Address: '0x1Ed23A4791a0D1E112a67f5F42fd61d03b9dc261'
+};
+var CHAIN_TO_ADDRESSES_MAP = (_CHAIN_TO_ADDRESSES_M = {}, _CHAIN_TO_ADDRESSES_M[exports.ChainId.MAINNET] = MAINNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM] = OPTIMISM_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_ONE] = ARBITRUM_ONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.POLYGON] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.POLYGON_MUMBAI] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.GOERLI] = GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.CELO] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.CELO_ALFAJORES] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BNB] = BNB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM_GOERLI] = OPTIMISM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.OPTIMISM_SEPOLIA] = OPTIMISM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_GOERLI] = ARBITRUM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ARBITRUM_SEPOLIA] = ARBITRUM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.SEPOLIA] = SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.AVALANCHE] = AVALANCHE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BASE] = BASE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BASE_GOERLI] = BASE_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZORA] = ZORA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZORA_SEPOLIA] = ZORA_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ROOTSTOCK] = ROOTSTOCK_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BLAST] = BLAST_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZKSYNC] = ZKSYNC_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ABSTRACT_TESTNET] = ABSTRACT_TESTNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ZERO] = ZERO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.BOB] = BOB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.CYBER] = CYBER_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.SHAPE] = SHAPE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.INK] = INK_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.REDSTONE_GARNET] = REDSTONE_GARNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.REDSTONE] = REDSTONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ABSTRACT_MAINNET] = ABSTRACT_MAINNET, _CHAIN_TO_ADDRESSES_M[exports.ChainId.ANIME_TESTNET] = ANIME_TESTNET, _CHAIN_TO_ADDRESSES_M);
 /* V3 Contract Addresses */
 var V3_CORE_FACTORY_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
   memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress;
@@ -849,7 +950,17 @@ var WETH9 = {
   56: /*#__PURE__*/new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),
   137: /*#__PURE__*/new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),
   43114: /*#__PURE__*/new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),
-  324: /*#__PURE__*/new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether')
+  324: /*#__PURE__*/new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),
+  11124: /*#__PURE__*/new Token(11124, '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d', 18, 'WETH', 'Wrapped Ether'),
+  543210: /*#__PURE__*/new Token(543210, '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c', 18, 'WETH', 'Wrapped Ether'),
+  60808: /*#__PURE__*/new Token(60808, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  7560: /*#__PURE__*/new Token(7560, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  360: /*#__PURE__*/new Token(360, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  57073: /*#__PURE__*/new Token(57073, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  690: /*#__PURE__*/new Token(690, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  17069: /*#__PURE__*/new Token(17069, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  2741: /*#__PURE__*/new Token(2741, '0x3439153EB7AF838Ad19d56E1571FBD09333C2809', 18, 'WETH', 'Wrapped Ether'),
+  6900: /*#__PURE__*/new Token(6900, '0x8f3e2785985aa4005c63f97f7cc89ce91a948267', 18, 'WETH', 'Wrapped Ether')
 };
 
 /**
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map
index d4d9bcc..b84ba93 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/computeZksyncCreate2Address.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n  ZKSYNC = 324,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n  ChainId.ZKSYNC,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  mixedRouteQuoterV1Address?: string\n  mixedRouteQuoterV2Address?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\n  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.\n  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\n}\n\nconst ZKSYNC_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',\n  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',\n  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',\n  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',\n  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',\n  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',\n  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n  [ChainId.ZKSYNC]: ZKSYNC_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address\n  if (mixedRouteQuoterV1Address) {\n    memo[chainId] = mixedRouteQuoterV1Address\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  324: new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import { getAddress } from '@ethersproject/address'\nimport { BytesLike, concat, hexZeroPad } from '@ethersproject/bytes'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport { toUtf8Bytes } from '@ethersproject/strings'\n\nexport function computeZksyncCreate2Address(\n  sender: string,\n  bytecodeHash: BytesLike,\n  salt: BytesLike,\n  input: BytesLike = '0x'\n) {\n  const prefix = keccak256(toUtf8Bytes('zksyncCreate2'))\n  const inputHash = keccak256(input)\n  const addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26)\n  return getAddress(addressBytes)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","ZKSYNC","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","mixedRouteQuoterV1Address","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","mixedRouteQuoterV2Address","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","ZKSYNC_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","_CHAIN_TO_ADDRESSES_M2","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","_inheritsLoose","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","computeZksyncCreate2Address","sender","bytecodeHash","salt","input","prefix","keccak256","toUtf8Bytes","inputHash","addressBytes","hexZeroPad","slice","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/computeZksyncCreate2Address.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n  ZKSYNC = 324,\n  ABSTRACT_TESTNET = 11124,\n  ABSTRACT_MAINNET = 2741,\n  ZERO = 543210,\n  BOB = 60808,\n  CYBER = 7560,\n  SHAPE = 360,\n  INK = 57073,\n  REDSTONE_GARNET = 17069,\n  REDSTONE = 690,\n  ANIME_TESTNET = 6900,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n  ChainId.ZKSYNC,\n  ChainId.ABSTRACT_TESTNET,\n  ChainId.ZERO,\n  ChainId.BOB,\n  ChainId.CYBER,\n  ChainId.SHAPE,\n  ChainId.INK,\n  ChainId.REDSTONE_GARNET,\n  ChainId.REDSTONE,\n  ChainId.ABSTRACT_MAINNET,\n  ChainId.ANIME_TESTNET,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  mixedRouteQuoterV1Address?: string\n  mixedRouteQuoterV2Address?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n  [ChainId.ABSTRACT_TESTNET]: '0xcD87b21B627cB2d695FBc2101cf64F8007F25E07',\n  [ChainId.ZERO]: '0x1B4427e212475B12e62f0f142b8AfEf3BC18B559',\n  [ChainId.CYBER]: '0x8AdDa31FE63696Ac64DED7D0Ea208102b1358c44',\n  [ChainId.SHAPE]: '0xb411eAF2f2070822B26E372E3Ea63c5060BA45E6',\n  [ChainId.INK]: '0xfe57A6BA1951F69aE2Ed4abe23e0f095DF500C04',\n  [ChainId.ABSTRACT_MAINNET]: '0x566d7510dEE58360a64C9827257cF6D0Dc43985E',\n  [ChainId.ANIME_TESTNET]: '0x69f2888491eA07BB10936aA110A5E0481122efd3',\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n  [ChainId.ABSTRACT_TESTNET]: '0x96ff7D9dbf52FdcAe79157d3b249282c7FABd409',\n  [ChainId.ZERO]: '0xD7C05A08cB43e99d596B606A1c03EA2F21289d94',\n  [ChainId.CYBER]: '0x58C90b5Dbc69963Fb0CAbee1163747FDBB7A8b18',\n  [ChainId.SHAPE]: '0x1f79AD8a85f570514e06Ff51BBffD540cCaB1249',\n  [ChainId.INK]: '0xB3FB126ACDd5AdCA2f50Ac644a7a2303745f18b4',\n  [ChainId.ABSTRACT_MAINNET]: '0xad1eCa41E6F772bE3cb5A48A6141f9bcc1AF9F7c',\n  [ChainId.ANIME_TESTNET]: '0x4F9f253Cc262fC82baD2d25BC1Ea7c67544535e3',\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\n  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.\n  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\n}\n\nconst ZKSYNC_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',\n  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',\n  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',\n  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',\n  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',\n  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',\n  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3',\n}\n\nconst ABSTRACT_TESTNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x2E17FF9b877661bDFEF8879a4B31665157a960F0',\n  multicallAddress: '0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8',\n  quoterAddress: '0xdE41045eb15C8352413199f35d6d1A32803DaaE2',\n  v3MigratorAddress: '0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed',\n  nonfungiblePositionManagerAddress: '0x069f199763c045A294C7913E64bA80E5F362A5d7',\n  tickLensAddress: '0x2EC62f97506E0184C423B01c525ab36e1c61f78A',\n  swapRouter02Address: '0xb9D4347d129a83cBC40499Cd4fF223dE172a70dF',\n}\n\nconst ZERO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',\n  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',\n  quoterAddress: '0x22B98c8Bdfea8D928101eEC40Af634ff37804997',\n  v3MigratorAddress: '0x05eead9625966847d60774Cf2c3b004AfBC45314',\n  nonfungiblePositionManagerAddress: '0x5b15468dFD83cF9192082d4510034c9431bb05eB',\n  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',\n  swapRouter02Address: '0xD936711eABD2Ce52747d7122757316C7DFe3599b',\n}\n\nconst BOB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xcb2436774C3e191c85056d248EF4260ce5f27A9D',\n  multicallAddress: '0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435',\n  quoterAddress: '0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA',\n  // Missing migrator address for BOB, using a place holder for now\n  v3MigratorAddress: '0x0000000000000000000000000000000000000000',\n  nonfungiblePositionManagerAddress: '0x743E03cceB4af2efA3CC76838f6E8B50B63F184c',\n  tickLensAddress: '0xB3309C48F8407651D918ca3Da4C45DE40109E641',\n  swapRouter02Address: '0x807F4E281B7A3B324825C64ca53c69F0b418dE40',\n}\n\nconst CYBER_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9701158fcF072c6852FD83B54D237e0cf5910C08',\n  multicallAddress: '0x906d6eB9CF8f64e100e44f8f491b833a8d40B530',\n  quoterAddress: '0xb7493d86A83eb7e4b57A3747013AaE82c907A58E',\n  v3MigratorAddress: '0xc4D8Afb323C316DD7c91ddd4f818d5aCCd0661E3',\n  nonfungiblePositionManagerAddress: '0xa5005349B7dcD9536832D97235675EF5Ae40f095',\n  tickLensAddress: '0x6cb5504B957625d01a88db4b27EAaFD5Ae4422b6',\n  swapRouter02Address: '0xdB4f0Db998BC1d429499fB11638fd3705E8e60Cc',\n}\nconst SHAPE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xeCf9288395797Da137f663a7DD0F0CDF918776F8',\n  multicallAddress: '0x356A450B32f5030ae7083702b86FaFbBe7490411',\n  quoterAddress: '0x5C5D397c5C5146559B709534dCDD81cB66617bBF',\n  v3MigratorAddress: '0x584d740230343ED1Ac23A54Dc13f0a5213d5A2B4',\n  nonfungiblePositionManagerAddress: '0xD29D14d0DbE2485E9f89305d5310CcD0D7a6DCb6',\n  tickLensAddress: '0x4372c608a10b760C12E82029E5D4445721Cf4A51',\n  swapRouter02Address: '0x32f6dCB405376B07b9D3d4C03015A5e329dD7D18',\n}\n\nconst INK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x640887A9ba3A9C53Ed27D0F7e8246A4F933f3424',\n  multicallAddress: '0xA0fCec583AeE6176527C07B198e5561722332014',\n  quoterAddress: '0x96b572D2d880cf2Fa2563651BD23ADE6f5516652',\n  v3MigratorAddress: '0xdce28D2D5392e19091Fe59d9750B3202EbE80641',\n  nonfungiblePositionManagerAddress: '0xC0836E5B058BBE22ae2266e1AC488A1A0fD8DCE8',\n  tickLensAddress: '0x3e6Dba802d62aba2361Dd632fbC9f547AA6789aE',\n  swapRouter02Address: '0x177778F19E89dD1012BdBe603F144088A95C4B53',\n}\n\nconst REDSTONE_GARNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x338F6033D373F610510e0F285637Ef5DDA776742',\n  multicallAddress: '0x320776fE9c8bed28dd6545A7B8e66114b7217153',\n  quoterAddress: '0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e',\n  v3MigratorAddress: '0x32d8273909300339d01c097E3A79eA522C0CCb47',\n  nonfungiblePositionManagerAddress: '0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9',\n  tickLensAddress: '0xe0e63e8a518b001A36FF8ac9F910CeC699D79c5A',\n  swapRouter02Address: '0xfB60447BF76d38A36A140a0e427C3f0787Eb3e80',\n}\n\nconst REDSTONE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xece75613Aa9b1680f0421E5B2eF376DF68aa83Bb',\n  multicallAddress: '0xd57B52452a0FDfE3ff8e0A40Bd10D00D0bfe0723',\n  quoterAddress: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n  v3MigratorAddress: '0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9',\n  nonfungiblePositionManagerAddress: '0x6Cdd7Ad7a1CacCe6163ed26BBA22E0A04dF41AD8',\n  tickLensAddress: '0x600749AA1c493aB8656AD3aeFd2Fd645C7Ba2CdA',\n  swapRouter02Address: '0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e',\n}\n\nconst ABSTRACT_MAINNET: ChainAddresses = {\n  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',\n  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',\n  quoterAddress: '0x728BD3eC25D5EDBafebB84F3d67367Cd9EBC7693',\n  v3MigratorAddress: '0x117Fc8DEf58147016f92bAE713533dDB828aBB7e',\n  nonfungiblePositionManagerAddress: '0xfA928D3ABc512383b8E5E77edd2d5678696084F9',\n  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',\n  swapRouter02Address: '0x7712FA47387542819d4E35A23f8116C90C18767C',\n}\n\nconst ANIME_TESTNET: ChainAddresses = {\n  v3CoreFactoryAddress: '0xE6eA2A148c13893a8eEDD57c75043055a8924C5f',\n  multicallAddress: '0x208960B3Bb6fa00bDcfa2cc9CdB8D412bbCe9f64',\n  quoterAddress: '0x623d6b580eAeCbfC22E3ced2233D5598CBBC37F0',\n  v3MigratorAddress: '0xc738ADA94944EC1d86C09c7204A428de35fb1CbF',\n  nonfungiblePositionManagerAddress: '0x1cFbE77bb62CEca3778769655dEEC3ECC6AaaDf7',\n  tickLensAddress: '0x086cD67c39646E95C1B9c4af4694Aa51A1a7636f',\n  swapRouter02Address: '0x1Ed23A4791a0D1E112a67f5F42fd61d03b9dc261',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n  [ChainId.ZKSYNC]: ZKSYNC_ADDRESSES,\n  [ChainId.ABSTRACT_TESTNET]: ABSTRACT_TESTNET_ADDRESSES,\n  [ChainId.ZERO]: ZERO_ADDRESSES,\n  [ChainId.BOB]: BOB_ADDRESSES,\n  [ChainId.CYBER]: CYBER_ADDRESSES,\n  [ChainId.SHAPE]: SHAPE_ADDRESSES,\n  [ChainId.INK]: INK_ADDRESSES,\n  [ChainId.REDSTONE_GARNET]: REDSTONE_GARNET_ADDRESSES,\n  [ChainId.REDSTONE]: REDSTONE_ADDRESSES,\n  [ChainId.ABSTRACT_MAINNET]: ABSTRACT_MAINNET,\n  [ChainId.ANIME_TESTNET]: ANIME_TESTNET,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address\n  if (mixedRouteQuoterV1Address) {\n    memo[chainId] = mixedRouteQuoterV1Address\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  324: new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),\n  11124: new Token(11124, '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d', 18, 'WETH', 'Wrapped Ether'),\n  543210: new Token(543210, '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c', 18, 'WETH', 'Wrapped Ether'),\n  60808: new Token(60808, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  7560: new Token(7560, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  360: new Token(360, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  57073: new Token(57073, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  690: new Token(690, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  17069: new Token(17069, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  2741: new Token(2741, '0x3439153EB7AF838Ad19d56E1571FBD09333C2809', 18, 'WETH', 'Wrapped Ether'),\n  6900: new Token(6900, '0x8f3e2785985aa4005c63f97f7cc89ce91a948267', 18, 'WETH', 'Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import { getAddress } from '@ethersproject/address'\nimport { BytesLike, concat, hexZeroPad } from '@ethersproject/bytes'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport { toUtf8Bytes } from '@ethersproject/strings'\n\nexport function computeZksyncCreate2Address(\n  sender: string,\n  bytecodeHash: BytesLike,\n  salt: BytesLike,\n  input: BytesLike = '0x'\n) {\n  const prefix = keccak256(toUtf8Bytes('zksyncCreate2'))\n  const inputHash = keccak256(input)\n  const addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26)\n  return getAddress(addressBytes)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","ZKSYNC","ABSTRACT_TESTNET","ZERO","BOB","CYBER","SHAPE","INK","REDSTONE_GARNET","REDSTONE","ABSTRACT_MAINNET","ANIME_TESTNET","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","mixedRouteQuoterV1Address","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","mixedRouteQuoterV2Address","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","ZKSYNC_ADDRESSES","ABSTRACT_TESTNET_ADDRESSES","ZERO_ADDRESSES","BOB_ADDRESSES","CYBER_ADDRESSES","SHAPE_ADDRESSES","INK_ADDRESSES","REDSTONE_GARNET_ADDRESSES","REDSTONE_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","_CHAIN_TO_ADDRESSES_M2","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","_inheritsLoose","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","computeZksyncCreate2Address","sender","bytecodeHash","salt","input","prefix","keccak256","toUtf8Bytes","inputHash","addressBytes","hexZeroPad","slice","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js
index 9ff09c1..8cb249e 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var r,t=e(require("jsbi")),n=e(require("tiny-invariant")),d=e(require("decimal.js-light")),a=e(require("big.js")),o=e(require("toformat")),i=require("@ethersproject/bignumber"),s=require("@ethersproject/address"),c=require("@ethersproject/bytes"),A=require("@ethersproject/keccak256"),u=require("@ethersproject/strings");function f(e){var r=function(e,r){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof r?r:String(r)}function E(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,f(n.key),n)}}function C(e,r,t){return r&&E(e.prototype,r),t&&E(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function x(){return(x=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}function p(e,r){var t,n;e.prototype=Object.create(r.prototype),e.prototype.constructor=e,t=e,n=r,(Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,r){return e.__proto__=r,e})(t,n)}(r=exports.ChainId||(exports.ChainId={}))[r.MAINNET=1]="MAINNET",r[r.GOERLI=5]="GOERLI",r[r.SEPOLIA=11155111]="SEPOLIA",r[r.OPTIMISM=10]="OPTIMISM",r[r.OPTIMISM_GOERLI=420]="OPTIMISM_GOERLI",r[r.OPTIMISM_SEPOLIA=11155420]="OPTIMISM_SEPOLIA",r[r.ARBITRUM_ONE=42161]="ARBITRUM_ONE",r[r.ARBITRUM_GOERLI=421613]="ARBITRUM_GOERLI",r[r.ARBITRUM_SEPOLIA=421614]="ARBITRUM_SEPOLIA",r[r.POLYGON=137]="POLYGON",r[r.POLYGON_MUMBAI=80001]="POLYGON_MUMBAI",r[r.CELO=42220]="CELO",r[r.CELO_ALFAJORES=44787]="CELO_ALFAJORES",r[r.GNOSIS=100]="GNOSIS",r[r.MOONBEAM=1284]="MOONBEAM",r[r.BNB=56]="BNB",r[r.AVALANCHE=43114]="AVALANCHE",r[r.BASE_GOERLI=84531]="BASE_GOERLI",r[r.BASE=8453]="BASE",r[r.ZORA=7777777]="ZORA",r[r.ZORA_SEPOLIA=999999999]="ZORA_SEPOLIA",r[r.ROOTSTOCK=30]="ROOTSTOCK",r[r.BLAST=81457]="BLAST",r[r.ZKSYNC=324]="ZKSYNC";var b,D,l,B,h,F,I,m,O,R=[exports.ChainId.MAINNET,exports.ChainId.OPTIMISM,exports.ChainId.OPTIMISM_GOERLI,exports.ChainId.OPTIMISM_SEPOLIA,exports.ChainId.ARBITRUM_ONE,exports.ChainId.ARBITRUM_GOERLI,exports.ChainId.ARBITRUM_SEPOLIA,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA,exports.ChainId.CELO_ALFAJORES,exports.ChainId.CELO,exports.ChainId.BNB,exports.ChainId.AVALANCHE,exports.ChainId.BASE,exports.ChainId.BASE_GOERLI,exports.ChainId.ZORA,exports.ChainId.ZORA_SEPOLIA,exports.ChainId.ROOTSTOCK,exports.ChainId.BLAST,exports.ChainId.ZKSYNC];(b=exports.NativeCurrencyName||(exports.NativeCurrencyName={})).ETHER="ETH",b.MATIC="MATIC",b.CELO="CELO",b.GNOSIS="XDAI",b.MOONBEAM="GLMR",b.BNB="BNB",b.AVAX="AVAX",b.ROOTSTOCK="RBTC";var S=[exports.ChainId.MAINNET,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA];function y(e,r){return void 0===r&&(r=[]),S.concat(r).reduce((function(r,t){return r[t]=e,r}),{})}var v,g,T=y("0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",[exports.ChainId.OPTIMISM,exports.ChainId.ARBITRUM_ONE,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.SEPOLIA]),_=((D={})[exports.ChainId.MAINNET]="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",D[exports.ChainId.GOERLI]="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",D[exports.ChainId.SEPOLIA]="0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0",D[exports.ChainId.OPTIMISM]="0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf",D[exports.ChainId.ARBITRUM_ONE]="0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9",D[exports.ChainId.AVALANCHE]="0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C",D[exports.ChainId.BASE]="0x8909dc15e40173ff4699343b6eb8132c65e18ec6",D[exports.ChainId.BNB]="0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6",D[exports.ChainId.POLYGON]="0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C",D[exports.ChainId.CELO]="0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f",D[exports.ChainId.BLAST]="0x5C346464d33F90bABaf70dB6388507CC889C1070",D),N=((l={})[exports.ChainId.MAINNET]="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",l[exports.ChainId.GOERLI]="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",l[exports.ChainId.ARBITRUM_ONE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",l[exports.ChainId.OPTIMISM]="0x4a7b5da61326a6379179b40d00f57e5bbdc962c2",l[exports.ChainId.BASE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",l[exports.ChainId.AVALANCHE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",l[exports.ChainId.BNB]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",l[exports.ChainId.POLYGON]="0xedf6066a2b290c185783862c7f4776a2c8077ad1",l[exports.ChainId.BLAST]="0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035",l),M={v3CoreFactoryAddress:"0x1F98431c8aD98523631AE4a59f267346ea31F984",multicallAddress:"0x1F98415757620B543A52E61c46B32eB19261F984",quoterAddress:"0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6",v3MigratorAddress:"0xA5644E29708357803b5A882D272c41cC0dF92B34",nonfungiblePositionManagerAddress:"0xC36442b4a4522E871399CD717aBDD847Ab11FE88"},L=x({},M,{mixedRouteQuoterV1Address:"0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E"}),P=x({},M,{mixedRouteQuoterV1Address:"0xBa60b6e6fF25488308789E6e0A65D838be34194e"}),w=M,U=x({},M,{multicallAddress:"0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB",tickLensAddress:"0xbfd8137f7d1516D3ea5cA83523914859ec47F573"}),q=M,G={v3CoreFactoryAddress:"0xAfE208a311B21f13EF87E33A90049fC17A7acDEc",multicallAddress:"0x633987602DE5C4F337e3DbF265303A1080324204",quoterAddress:"0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8",v3MigratorAddress:"0x3cFd4d48EDfDCC53D3f173F596f621064614C582",nonfungiblePositionManagerAddress:"0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A",tickLensAddress:"0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D"},W=((B={})[exports.ChainId.MAINNET]=L,B[exports.ChainId.OPTIMISM]=w,B[exports.ChainId.ARBITRUM_ONE]=U,B[exports.ChainId.POLYGON]=q,B[exports.ChainId.POLYGON_MUMBAI]=q,B[exports.ChainId.GOERLI]=P,B[exports.ChainId.CELO]=G,B[exports.ChainId.CELO_ALFAJORES]=G,B[exports.ChainId.BNB]={v3CoreFactoryAddress:"0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7",multicallAddress:"0x963Df249eD09c358A4819E39d9Cd5736c3087184",quoterAddress:"0x78D78E420Da98ad378D7799bE8f4AF69033EB077",v3MigratorAddress:"0x32681814957e0C13117ddc0c2aba232b5c9e760f",nonfungiblePositionManagerAddress:"0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613",tickLensAddress:"0xD9270014D396281579760619CCf4c3af0501A47C",swapRouter02Address:"0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2"},B[exports.ChainId.OPTIMISM_GOERLI]={v3CoreFactoryAddress:"0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10",multicallAddress:"0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd",quoterAddress:"0x9569CbA925c8ca2248772A9A4976A516743A246F",v3MigratorAddress:"0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8",nonfungiblePositionManagerAddress:"0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6",tickLensAddress:"0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e"},B[exports.ChainId.OPTIMISM_SEPOLIA]={v3CoreFactoryAddress:"0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF",multicallAddress:"0x80e4e06841bb76AA9735E0448cB8d003C0EF009a",quoterAddress:"0x0FBEa6cf957d95ee9313490050F6A0DA68039404",v3MigratorAddress:"0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07",nonfungiblePositionManagerAddress:"0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d",tickLensAddress:"0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5",swapRouter02Address:"0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4"},B[exports.ChainId.ARBITRUM_GOERLI]={v3CoreFactoryAddress:"0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6",multicallAddress:"0x8260CB40247290317a4c062F3542622367F206Ee",quoterAddress:"0x1dd92b83591781D0C6d98d07391eea4b9a6008FA",v3MigratorAddress:"0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3",nonfungiblePositionManagerAddress:"0x622e4726a167799826d1E1D150b076A7725f5D81",tickLensAddress:"0xb52429333da969a0C79a60930a4Bf0020E5D1DE8"},B[exports.ChainId.ARBITRUM_SEPOLIA]={v3CoreFactoryAddress:"0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e",multicallAddress:"0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A",quoterAddress:"0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B",v3MigratorAddress:"0x398f43ef2c67B941147157DA1c5a868E906E043D",nonfungiblePositionManagerAddress:"0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65",tickLensAddress:"0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9",swapRouter02Address:"0x101F443B4d1b059569D643917553c771E1b9663E"},B[exports.ChainId.SEPOLIA]={v3CoreFactoryAddress:"0x0227628f3F023bb0B980b67D528571c95c6DaC1c",multicallAddress:"0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07",quoterAddress:"0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3",v3MigratorAddress:"0x729004182cF005CEC8Bd85df140094b6aCbe8b15",nonfungiblePositionManagerAddress:"0x1238536071E1c677A632429e3655c799b22cDA52",tickLensAddress:"0xd7f33bcdb21b359c8ee6f0251d30e94832baad07",swapRouter02Address:"0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E",mixedRouteQuoterV2Address:"0xa8b0be287acB850952DE4287b84B7222cc654C09"},B[exports.ChainId.AVALANCHE]={v3CoreFactoryAddress:"0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD",multicallAddress:"0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2",quoterAddress:"0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F",v3MigratorAddress:"0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97",nonfungiblePositionManagerAddress:"0x655C406EBFa14EE2006250925e54ec43AD184f8B",tickLensAddress:"0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950",swapRouter02Address:"0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE"},B[exports.ChainId.BASE]={v3CoreFactoryAddress:"0x33128a8fC17869897dcE68Ed026d694621f6FDfD",multicallAddress:"0x091e99cb1C49331a94dD62755D168E941AbD0693",quoterAddress:"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a",v3MigratorAddress:"0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7",nonfungiblePositionManagerAddress:"0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1",tickLensAddress:"0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d",swapRouter02Address:"0x2626664c2603336E57B271c5C0b26F421741e481",mixedRouteQuoterV1Address:"0xe544efae946f0008ae9a8d64493efa7886b73776"},B[exports.ChainId.BASE_GOERLI]={v3CoreFactoryAddress:"0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2",multicallAddress:"0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439",quoterAddress:"0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9",v3MigratorAddress:"0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE",nonfungiblePositionManagerAddress:"0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30",tickLensAddress:"0x1acB873Ee909D0c98adB18e4474943249F931b92",swapRouter02Address:"0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d"},B[exports.ChainId.ZORA]={v3CoreFactoryAddress:"0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb",multicallAddress:"0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15",quoterAddress:"0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df",v3MigratorAddress:"0x048352d8dCF13686982C799da63fA6426a9D0b60",nonfungiblePositionManagerAddress:"0xbC91e8DfA3fF18De43853372A3d7dfe585137D78",tickLensAddress:"0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044",swapRouter02Address:"0x7De04c96BE5159c3b5CeffC82aa176dc81281557"},B[exports.ChainId.ZORA_SEPOLIA]={v3CoreFactoryAddress:"0x4324A677D74764f46f33ED447964252441aA8Db6",multicallAddress:"0xA1E7e3A69671C4494EC59Dbd442de930a93F911A",quoterAddress:"0xC195976fEF0985886E37036E2DF62bF371E12Df0",v3MigratorAddress:"0x65ef259b31bf1d977c37e9434658694267674897",nonfungiblePositionManagerAddress:"0xB8458EaAe43292e3c1F7994EFd016bd653d23c20",tickLensAddress:"0x23C0F71877a1Fc4e20A78018f9831365c85f3064"},B[exports.ChainId.ROOTSTOCK]={v3CoreFactoryAddress:"0xaF37EC98A00FD63689CF3060BF3B6784E00caD82",multicallAddress:"0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386",quoterAddress:"0xb51727c996C68E60F598A923a5006853cd2fEB31",v3MigratorAddress:"0x16678977CA4ec3DAD5efc7b15780295FE5f56162",nonfungiblePositionManagerAddress:"0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1",tickLensAddress:"0x55B9dF5bF68ADe972191a91980459f48ecA16afC",swapRouter02Address:"0x0B14ff67f0014046b4b99057Aec4509640b3947A"},B[exports.ChainId.BLAST]={v3CoreFactoryAddress:"0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd",multicallAddress:"0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705",quoterAddress:"0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77",v3MigratorAddress:"0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0",nonfungiblePositionManagerAddress:"0xB218e4f7cF0533d4696fDfC419A0023D33345F28",tickLensAddress:"0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274",swapRouter02Address:"0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66"},B[exports.ChainId.ZKSYNC]={v3CoreFactoryAddress:"0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422",multicallAddress:"0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C",quoterAddress:"0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28",v3MigratorAddress:"0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E",nonfungiblePositionManagerAddress:"0x0616e5762c1E7Dc3723c50663dF10a162D690a86",tickLensAddress:"0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89",swapRouter02Address:"0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3"},B),k=x({},R.reduce((function(e,r){return e[r]=W[r].v3CoreFactoryAddress,e}),{})),H=x({},R.reduce((function(e,r){var t=W[r].v3MigratorAddress;return t&&(e[r]=t),e}),{})),V=x({},R.reduce((function(e,r){return e[r]=W[r].multicallAddress,e}),{})),j=y("0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F"),Y=((h={})[exports.ChainId.MAINNET]="0xC4e172459f1E7939D522503B81AFAaC1014CE6F6",h),Z=((F={})[exports.ChainId.MAINNET]="0x408ED6354d4973f66138C91495F2f2FCbd8724C3",F),K=y("0x1a9C8182C09F50C8318d769245beA52c32BE35BC"),X=((I={})[exports.ChainId.MAINNET]="0x090D4613473dEE047c3f2706764f49E0821D256e",I),Q=((m={})[exports.ChainId.MAINNET]="0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8",m),J=x({},R.reduce((function(e,r){return e[r]=W[r].quoterAddress,e}),{})),z=x({},R.reduce((function(e,r){var t=W[r].nonfungiblePositionManagerAddress;return t&&(e[r]=t),e}),{})),$=x({},y("0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e")),ee=((O={})[exports.ChainId.MAINNET]="0x65770b5283117639760beA3F867b69b3697a91dd",O),re=x({},R.reduce((function(e,r){var t=W[r].tickLensAddress;return t&&(e[r]=t),e}),{})),te=R.reduce((function(e,r){var t=W[r].mixedRouteQuoterV1Address;return t&&(e[r]=t),e}),{});(v=exports.TradeType||(exports.TradeType={}))[v.EXACT_INPUT=0]="EXACT_INPUT",v[v.EXACT_OUTPUT=1]="EXACT_OUTPUT",(g=exports.Rounding||(exports.Rounding={}))[g.ROUND_DOWN=0]="ROUND_DOWN",g[g.ROUND_HALF_UP=1]="ROUND_HALF_UP",g[g.ROUND_UP=2]="ROUND_UP";var ne,de,ae=t.BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),oe=o(d),ie=o(a),se=((ne={})[exports.Rounding.ROUND_DOWN]=oe.ROUND_DOWN,ne[exports.Rounding.ROUND_HALF_UP]=oe.ROUND_HALF_UP,ne[exports.Rounding.ROUND_UP]=oe.ROUND_UP,ne),ce=((de={})[exports.Rounding.ROUND_DOWN]=0,de[exports.Rounding.ROUND_HALF_UP]=1,de[exports.Rounding.ROUND_UP]=3,de),Ae=function(){function e(e,r){void 0===r&&(r=t.BigInt(1)),this.numerator=t.BigInt(e),this.denominator=t.BigInt(r)}e.tryParseFraction=function(r){if(r instanceof t||"number"==typeof r||"string"==typeof r)return new e(r);if("numerator"in r&&"denominator"in r)return r;throw new Error("Could not parse fraction")};var r=e.prototype;return r.invert=function(){return new e(this.denominator,this.numerator)},r.add=function(r){var n=e.tryParseFraction(r);return t.equal(this.denominator,n.denominator)?new e(t.add(this.numerator,n.numerator),this.denominator):new e(t.add(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator)),t.multiply(this.denominator,n.denominator))},r.subtract=function(r){var n=e.tryParseFraction(r);return t.equal(this.denominator,n.denominator)?new e(t.subtract(this.numerator,n.numerator),this.denominator):new e(t.subtract(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator)),t.multiply(this.denominator,n.denominator))},r.lessThan=function(r){var n=e.tryParseFraction(r);return t.lessThan(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.equalTo=function(r){var n=e.tryParseFraction(r);return t.equal(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.greaterThan=function(r){var n=e.tryParseFraction(r);return t.greaterThan(t.multiply(this.numerator,n.denominator),t.multiply(n.numerator,this.denominator))},r.multiply=function(r){var n=e.tryParseFraction(r);return new e(t.multiply(this.numerator,n.numerator),t.multiply(this.denominator,n.denominator))},r.divide=function(r){var n=e.tryParseFraction(r);return new e(t.multiply(this.numerator,n.denominator),t.multiply(this.denominator,n.numerator))},r.toSignificant=function(e,r,t){void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||n(!1),e>0||n(!1),oe.set({precision:e+1,rounding:se[t]});var d=new oe(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(e);return d.toFormat(d.decimalPlaces(),r)},r.toFixed=function(e,r,t){return void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||n(!1),e>=0||n(!1),ie.DP=e,ie.RM=ce[t],new ie(this.numerator.toString()).div(this.denominator.toString()).toFormat(e,r)},C(e,[{key:"quotient",get:function(){return t.divide(this.numerator,this.denominator)}},{key:"remainder",get:function(){return new e(t.remainder(this.numerator,this.denominator),this.denominator)}},{key:"asFraction",get:function(){return new e(this.numerator,this.denominator)}}]),e}(),ue=o(a),fe=function(e){function r(r,d,a){var o;return o=e.call(this,d,a)||this,t.lessThanOrEqual(o.quotient,ae)||n(!1),o.currency=r,o.decimalScale=t.exponentiate(t.BigInt(10),t.BigInt(r.decimals)),o}p(r,e),r.fromRawAmount=function(e,t){return new r(e,t)},r.fromFractionalAmount=function(e,t,n){return new r(e,t,n)};var d=r.prototype;return d.add=function(t){this.currency.equals(t.currency)||n(!1);var d=e.prototype.add.call(this,t);return r.fromFractionalAmount(this.currency,d.numerator,d.denominator)},d.subtract=function(t){this.currency.equals(t.currency)||n(!1);var d=e.prototype.subtract.call(this,t);return r.fromFractionalAmount(this.currency,d.numerator,d.denominator)},d.multiply=function(t){var n=e.prototype.multiply.call(this,t);return r.fromFractionalAmount(this.currency,n.numerator,n.denominator)},d.divide=function(t){var n=e.prototype.divide.call(this,t);return r.fromFractionalAmount(this.currency,n.numerator,n.denominator)},d.toSignificant=function(r,t,n){return void 0===r&&(r=6),void 0===n&&(n=exports.Rounding.ROUND_DOWN),e.prototype.divide.call(this,this.decimalScale).toSignificant(r,t,n)},d.toFixed=function(r,t,d){return void 0===r&&(r=this.currency.decimals),void 0===d&&(d=exports.Rounding.ROUND_DOWN),r<=this.currency.decimals||n(!1),e.prototype.divide.call(this,this.decimalScale).toFixed(r,t,d)},d.toExact=function(e){return void 0===e&&(e={groupSeparator:""}),ue.DP=this.currency.decimals,new ue(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(e)},C(r,[{key:"wrapped",get:function(){return this.currency.isToken?this:r.fromFractionalAmount(this.currency.wrapped,this.numerator,this.denominator)}}]),r}(Ae),Ee=new Ae(t.BigInt(100));function Ce(e){return new xe(e.numerator,e.denominator)}var xe=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isPercent=!0,r}p(r,e);var t=r.prototype;return t.add=function(r){return Ce(e.prototype.add.call(this,r))},t.subtract=function(r){return Ce(e.prototype.subtract.call(this,r))},t.multiply=function(r){return Ce(e.prototype.multiply.call(this,r))},t.divide=function(r){return Ce(e.prototype.divide.call(this,r))},t.toSignificant=function(r,t,n){return void 0===r&&(r=5),e.prototype.multiply.call(this,Ee).toSignificant(r,t,n)},t.toFixed=function(r,t,n){return void 0===r&&(r=2),e.prototype.multiply.call(this,Ee).toFixed(r,t,n)},r}(Ae),pe=function(e){function r(){for(var r,n,d,a,o,i=arguments.length,s=new Array(i),c=0;c<i;c++)s[c]=arguments[c];if(4===s.length)n=s[0],d=s[1],a=s[2],o=s[3];else{var A=s[0].quoteAmount.divide(s[0].baseAmount),u=[s[0].baseAmount.currency,s[0].quoteAmount.currency,A.denominator,A.numerator];n=u[0],d=u[1],a=u[2],o=u[3]}return(r=e.call(this,o,a)||this).baseCurrency=n,r.quoteCurrency=d,r.scalar=new Ae(t.exponentiate(t.BigInt(10),t.BigInt(n.decimals)),t.exponentiate(t.BigInt(10),t.BigInt(d.decimals))),r}p(r,e);var d=r.prototype;return d.invert=function(){return new r(this.quoteCurrency,this.baseCurrency,this.numerator,this.denominator)},d.multiply=function(t){this.quoteCurrency.equals(t.baseCurrency)||n(!1);var d=e.prototype.multiply.call(this,t);return new r(this.baseCurrency,t.quoteCurrency,d.denominator,d.numerator)},d.quote=function(r){r.currency.equals(this.baseCurrency)||n(!1);var t=e.prototype.multiply.call(this,r);return fe.fromFractionalAmount(this.quoteCurrency,t.numerator,t.denominator)},d.toSignificant=function(e,r,t){return void 0===e&&(e=6),this.adjustedForDecimals.toSignificant(e,r,t)},d.toFixed=function(e,r,t){return void 0===e&&(e=4),this.adjustedForDecimals.toFixed(e,r,t)},C(r,[{key:"adjustedForDecimals",get:function(){return e.prototype.multiply.call(this,this.scalar)}}]),r}(Ae),be=function(e,r,t,d){Number.isSafeInteger(e)||n(!1),r>=0&&r<255&&Number.isInteger(r)||n(!1),this.chainId=e,this.decimals=r,this.symbol=t,this.name=d},De=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isNative=!0,r.isToken=!1,r}return p(r,e),r}(be);function le(e){try{return s.getAddress(e)}catch(r){throw new Error(e+" is not a valid address.")}}var Be=/^0x[0-9a-fA-F]{40}$/,he=function(e){function r(r,t,d,a,o,s,c,A){var u;return(u=e.call(this,r,d,a,o)||this).isNative=!1,u.isToken=!0,u.address=s?function(e){if(Be.test(e))return e;throw new Error(e+" is not a valid address.")}(t):le(t),c&&(c.gte(i.BigNumber.from(0))||n(!1)),A&&(A.gte(i.BigNumber.from(0))||n(!1)),u.buyFeeBps=c,u.sellFeeBps=A,u}p(r,e);var t=r.prototype;return t.equals=function(e){return e.isToken&&this.chainId===e.chainId&&this.address.toLowerCase()===e.address.toLowerCase()},t.sortsBefore=function(e){return this.chainId!==e.chainId&&n(!1),this.address.toLowerCase()===e.address.toLowerCase()&&n(!1),this.address.toLowerCase()<e.address.toLowerCase()},C(r,[{key:"wrapped",get:function(){return this}}]),r}(be),Fe={1:new he(1,"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",18,"WETH","Wrapped Ether"),3:new he(3,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),4:new he(4,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),5:new he(5,"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",18,"WETH","Wrapped Ether"),42:new he(42,"0xd0A1E359811322d97991E03f863a0C30C2cF029C",18,"WETH","Wrapped Ether"),10:new he(10,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),69:new he(69,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),11155420:new he(11155420,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),42161:new he(42161,"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",18,"WETH","Wrapped Ether"),421611:new he(421611,"0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681",18,"WETH","Wrapped Ether"),421614:new he(421614,"0x980B62Da83eFf3D4576C647993b0c1D7faf17c73",18,"WETH","Wrapped Ether"),8453:new he(8453,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),56:new he(56,"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",18,"WBNB","Wrapped BNB"),137:new he(137,"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",18,"WMATIC","Wrapped MATIC"),43114:new he(43114,"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",18,"WAVAX","Wrapped AVAX"),324:new he(324,"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91",18,"WETH","Wrapped Ether")},Ie=function(e){function r(r){return e.call(this,r,18,"ETH","Ether")||this}return p(r,e),r.onChain=function(e){var t;return null!=(t=this._etherCache[e])?t:this._etherCache[e]=new r(e)},r.prototype.equals=function(e){return e.isNative&&e.chainId===this.chainId},C(r,[{key:"wrapped",get:function(){var e=Fe[this.chainId];return e||n(!1),e}}]),r}(De);Ie._etherCache={};var me=t.BigInt(Number.MAX_SAFE_INTEGER),Oe=t.BigInt(0),Re=t.BigInt(1),Se=t.BigInt(2);exports.ARGENT_WALLET_DETECTOR_ADDRESS=Q,exports.CHAIN_TO_ADDRESSES_MAP=W,exports.CurrencyAmount=fe,exports.ENS_REGISTRAR_ADDRESSES=$,exports.Ether=Ie,exports.Fraction=Ae,exports.GOVERNANCE_ALPHA_V0_ADDRESSES=j,exports.GOVERNANCE_ALPHA_V1_ADDRESSES=Y,exports.GOVERNANCE_BRAVO_ADDRESSES=Z,exports.MERKLE_DISTRIBUTOR_ADDRESS=X,exports.MIXED_ROUTE_QUOTER_V1_ADDRESSES=te,exports.MULTICALL_ADDRESSES=V,exports.MaxUint256=ae,exports.NONFUNGIBLE_POSITION_MANAGER_ADDRESSES=z,exports.NativeCurrency=De,exports.Percent=xe,exports.Price=pe,exports.QUOTER_ADDRESSES=J,exports.SOCKS_CONTROLLER_ADDRESSES=ee,exports.SUPPORTED_CHAINS=R,exports.SWAP_ROUTER_02_ADDRESSES=function(e){var r;return R.includes(e)?null!=(r=W[e].swapRouter02Address)?r:"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45":""},exports.TICK_LENS_ADDRESSES=re,exports.TIMELOCK_ADDRESSES=K,exports.Token=he,exports.UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS="0x8B799381ac40b838BBA4131ffB26197C432AFe78",exports.UNI_ADDRESSES=T,exports.V2_FACTORY_ADDRESS="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",exports.V2_FACTORY_ADDRESSES=_,exports.V2_ROUTER_ADDRESS="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",exports.V2_ROUTER_ADDRESSES=N,exports.V3_CORE_FACTORY_ADDRESSES=k,exports.V3_MIGRATOR_ADDRESSES=H,exports.WETH9=Fe,exports.computePriceImpact=function(e,r,t){var n=e.quote(r),d=n.subtract(t).divide(n);return new xe(d.numerator,d.denominator)},exports.computeZksyncCreate2Address=function(e,r,t,n){void 0===n&&(n="0x");var d=A.keccak256(u.toUtf8Bytes("zksyncCreate2")),a=A.keccak256(n),o=A.keccak256(c.concat([d,c.hexZeroPad(e,32),t,r,a])).slice(26);return s.getAddress(o)},exports.sortedInsert=function(e,r,t,d){if(t>0||n(!1),e.length<=t||n(!1),0===e.length)return e.push(r),null;var a=e.length===t;if(a&&d(e[e.length-1],r)<=0)return r;for(var o=0,i=e.length;o<i;){var s=o+i>>>1;d(e[s],r)<=0?o=s+1:i=s}return e.splice(o,0,r),a?e.pop():null},exports.sqrt=function(e){if(t.greaterThanOrEqual(e,Oe)||n(!1),t.lessThan(e,me))return t.BigInt(Math.floor(Math.sqrt(t.toNumber(e))));var r,d;for(r=e,d=t.add(t.divide(e,Se),Re);t.lessThan(d,r);)r=d,d=t.divide(t.add(t.divide(e,d),d),Se);return r},exports.validateAndParseAddress=le;
+"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(exports,"__esModule",{value:!0});var r,t=e(require("jsbi")),d=e(require("tiny-invariant")),a=e(require("decimal.js-light")),n=e(require("big.js")),s=e(require("toformat")),o=require("@ethersproject/bignumber"),i=require("@ethersproject/address"),A=require("@ethersproject/bytes"),c=require("@ethersproject/keccak256"),E=require("@ethersproject/strings");function C(e){var r=function(e,r){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var d=t.call(e,"string");if("object"!=typeof d)return d;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof r?r:String(r)}function f(e,r){for(var t=0;t<r.length;t++){var d=r[t];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(e,C(d.key),d)}}function u(e,r,t){return r&&f(e.prototype,r),t&&f(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}function x(){return(x=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var d in t)Object.prototype.hasOwnProperty.call(t,d)&&(e[d]=t[d])}return e}).apply(this,arguments)}function b(e,r){var t,d;e.prototype=Object.create(r.prototype),e.prototype.constructor=e,t=e,d=r,(Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,r){return e.__proto__=r,e})(t,d)}(r=exports.ChainId||(exports.ChainId={}))[r.MAINNET=1]="MAINNET",r[r.GOERLI=5]="GOERLI",r[r.SEPOLIA=11155111]="SEPOLIA",r[r.OPTIMISM=10]="OPTIMISM",r[r.OPTIMISM_GOERLI=420]="OPTIMISM_GOERLI",r[r.OPTIMISM_SEPOLIA=11155420]="OPTIMISM_SEPOLIA",r[r.ARBITRUM_ONE=42161]="ARBITRUM_ONE",r[r.ARBITRUM_GOERLI=421613]="ARBITRUM_GOERLI",r[r.ARBITRUM_SEPOLIA=421614]="ARBITRUM_SEPOLIA",r[r.POLYGON=137]="POLYGON",r[r.POLYGON_MUMBAI=80001]="POLYGON_MUMBAI",r[r.CELO=42220]="CELO",r[r.CELO_ALFAJORES=44787]="CELO_ALFAJORES",r[r.GNOSIS=100]="GNOSIS",r[r.MOONBEAM=1284]="MOONBEAM",r[r.BNB=56]="BNB",r[r.AVALANCHE=43114]="AVALANCHE",r[r.BASE_GOERLI=84531]="BASE_GOERLI",r[r.BASE=8453]="BASE",r[r.ZORA=7777777]="ZORA",r[r.ZORA_SEPOLIA=999999999]="ZORA_SEPOLIA",r[r.ROOTSTOCK=30]="ROOTSTOCK",r[r.BLAST=81457]="BLAST",r[r.ZKSYNC=324]="ZKSYNC",r[r.ABSTRACT_TESTNET=11124]="ABSTRACT_TESTNET",r[r.ABSTRACT_MAINNET=2741]="ABSTRACT_MAINNET",r[r.ZERO=543210]="ZERO",r[r.BOB=60808]="BOB",r[r.CYBER=7560]="CYBER",r[r.SHAPE=360]="SHAPE",r[r.INK=57073]="INK",r[r.REDSTONE_GARNET=17069]="REDSTONE_GARNET",r[r.REDSTONE=690]="REDSTONE",r[r.ANIME_TESTNET=6900]="ANIME_TESTNET";var B,D,p,F,l,h,I,T,R,O=[exports.ChainId.MAINNET,exports.ChainId.OPTIMISM,exports.ChainId.OPTIMISM_GOERLI,exports.ChainId.OPTIMISM_SEPOLIA,exports.ChainId.ARBITRUM_ONE,exports.ChainId.ARBITRUM_GOERLI,exports.ChainId.ARBITRUM_SEPOLIA,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA,exports.ChainId.CELO_ALFAJORES,exports.ChainId.CELO,exports.ChainId.BNB,exports.ChainId.AVALANCHE,exports.ChainId.BASE,exports.ChainId.BASE_GOERLI,exports.ChainId.ZORA,exports.ChainId.ZORA_SEPOLIA,exports.ChainId.ROOTSTOCK,exports.ChainId.BLAST,exports.ChainId.ZKSYNC,exports.ChainId.ABSTRACT_TESTNET,exports.ChainId.ZERO,exports.ChainId.BOB,exports.ChainId.CYBER,exports.ChainId.SHAPE,exports.ChainId.INK,exports.ChainId.REDSTONE_GARNET,exports.ChainId.REDSTONE,exports.ChainId.ABSTRACT_MAINNET,exports.ChainId.ANIME_TESTNET];(B=exports.NativeCurrencyName||(exports.NativeCurrencyName={})).ETHER="ETH",B.MATIC="MATIC",B.CELO="CELO",B.GNOSIS="XDAI",B.MOONBEAM="GLMR",B.BNB="BNB",B.AVAX="AVAX",B.ROOTSTOCK="RBTC";var m=[exports.ChainId.MAINNET,exports.ChainId.GOERLI,exports.ChainId.SEPOLIA];function S(e,r){return void 0===r&&(r=[]),m.concat(r).reduce((function(r,t){return r[t]=e,r}),{})}var N,g,v=S("0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984",[exports.ChainId.OPTIMISM,exports.ChainId.ARBITRUM_ONE,exports.ChainId.POLYGON,exports.ChainId.POLYGON_MUMBAI,exports.ChainId.SEPOLIA]),M=((D={})[exports.ChainId.MAINNET]="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",D[exports.ChainId.GOERLI]="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",D[exports.ChainId.SEPOLIA]="0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0",D[exports.ChainId.OPTIMISM]="0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf",D[exports.ChainId.ARBITRUM_ONE]="0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9",D[exports.ChainId.AVALANCHE]="0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C",D[exports.ChainId.BASE]="0x8909dc15e40173ff4699343b6eb8132c65e18ec6",D[exports.ChainId.BNB]="0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6",D[exports.ChainId.POLYGON]="0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C",D[exports.ChainId.CELO]="0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f",D[exports.ChainId.BLAST]="0x5C346464d33F90bABaf70dB6388507CC889C1070",D[exports.ChainId.ABSTRACT_TESTNET]="0xcD87b21B627cB2d695FBc2101cf64F8007F25E07",D[exports.ChainId.ZERO]="0x1B4427e212475B12e62f0f142b8AfEf3BC18B559",D[exports.ChainId.CYBER]="0x8AdDa31FE63696Ac64DED7D0Ea208102b1358c44",D[exports.ChainId.SHAPE]="0xb411eAF2f2070822B26E372E3Ea63c5060BA45E6",D[exports.ChainId.INK]="0xfe57A6BA1951F69aE2Ed4abe23e0f095DF500C04",D[exports.ChainId.ABSTRACT_MAINNET]="0x566d7510dEE58360a64C9827257cF6D0Dc43985E",D[exports.ChainId.ANIME_TESTNET]="0x69f2888491eA07BB10936aA110A5E0481122efd3",D),y=((p={})[exports.ChainId.MAINNET]="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",p[exports.ChainId.GOERLI]="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",p[exports.ChainId.ARBITRUM_ONE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",p[exports.ChainId.OPTIMISM]="0x4a7b5da61326a6379179b40d00f57e5bbdc962c2",p[exports.ChainId.BASE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",p[exports.ChainId.AVALANCHE]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",p[exports.ChainId.BNB]="0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24",p[exports.ChainId.POLYGON]="0xedf6066a2b290c185783862c7f4776a2c8077ad1",p[exports.ChainId.BLAST]="0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035",p[exports.ChainId.ABSTRACT_TESTNET]="0x96ff7D9dbf52FdcAe79157d3b249282c7FABd409",p[exports.ChainId.ZERO]="0xD7C05A08cB43e99d596B606A1c03EA2F21289d94",p[exports.ChainId.CYBER]="0x58C90b5Dbc69963Fb0CAbee1163747FDBB7A8b18",p[exports.ChainId.SHAPE]="0x1f79AD8a85f570514e06Ff51BBffD540cCaB1249",p[exports.ChainId.INK]="0xB3FB126ACDd5AdCA2f50Ac644a7a2303745f18b4",p[exports.ChainId.ABSTRACT_MAINNET]="0xad1eCa41E6F772bE3cb5A48A6141f9bcc1AF9F7c",p[exports.ChainId.ANIME_TESTNET]="0x4F9f253Cc262fC82baD2d25BC1Ea7c67544535e3",p),_={v3CoreFactoryAddress:"0x1F98431c8aD98523631AE4a59f267346ea31F984",multicallAddress:"0x1F98415757620B543A52E61c46B32eB19261F984",quoterAddress:"0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6",v3MigratorAddress:"0xA5644E29708357803b5A882D272c41cC0dF92B34",nonfungiblePositionManagerAddress:"0xC36442b4a4522E871399CD717aBDD847Ab11FE88"},L=x({},_,{mixedRouteQuoterV1Address:"0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E"}),P=x({},_,{mixedRouteQuoterV1Address:"0xBa60b6e6fF25488308789E6e0A65D838be34194e"}),w=_,U=x({},_,{multicallAddress:"0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB",tickLensAddress:"0xbfd8137f7d1516D3ea5cA83523914859ec47F573"}),q=_,W={v3CoreFactoryAddress:"0xAfE208a311B21f13EF87E33A90049fC17A7acDEc",multicallAddress:"0x633987602DE5C4F337e3DbF265303A1080324204",quoterAddress:"0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8",v3MigratorAddress:"0x3cFd4d48EDfDCC53D3f173F596f621064614C582",nonfungiblePositionManagerAddress:"0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A",tickLensAddress:"0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D"},k=((F={})[exports.ChainId.MAINNET]=L,F[exports.ChainId.OPTIMISM]=w,F[exports.ChainId.ARBITRUM_ONE]=U,F[exports.ChainId.POLYGON]=q,F[exports.ChainId.POLYGON_MUMBAI]=q,F[exports.ChainId.GOERLI]=P,F[exports.ChainId.CELO]=W,F[exports.ChainId.CELO_ALFAJORES]=W,F[exports.ChainId.BNB]={v3CoreFactoryAddress:"0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7",multicallAddress:"0x963Df249eD09c358A4819E39d9Cd5736c3087184",quoterAddress:"0x78D78E420Da98ad378D7799bE8f4AF69033EB077",v3MigratorAddress:"0x32681814957e0C13117ddc0c2aba232b5c9e760f",nonfungiblePositionManagerAddress:"0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613",tickLensAddress:"0xD9270014D396281579760619CCf4c3af0501A47C",swapRouter02Address:"0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2"},F[exports.ChainId.OPTIMISM_GOERLI]={v3CoreFactoryAddress:"0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10",multicallAddress:"0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd",quoterAddress:"0x9569CbA925c8ca2248772A9A4976A516743A246F",v3MigratorAddress:"0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8",nonfungiblePositionManagerAddress:"0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6",tickLensAddress:"0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e"},F[exports.ChainId.OPTIMISM_SEPOLIA]={v3CoreFactoryAddress:"0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF",multicallAddress:"0x80e4e06841bb76AA9735E0448cB8d003C0EF009a",quoterAddress:"0x0FBEa6cf957d95ee9313490050F6A0DA68039404",v3MigratorAddress:"0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07",nonfungiblePositionManagerAddress:"0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d",tickLensAddress:"0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5",swapRouter02Address:"0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4"},F[exports.ChainId.ARBITRUM_GOERLI]={v3CoreFactoryAddress:"0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6",multicallAddress:"0x8260CB40247290317a4c062F3542622367F206Ee",quoterAddress:"0x1dd92b83591781D0C6d98d07391eea4b9a6008FA",v3MigratorAddress:"0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3",nonfungiblePositionManagerAddress:"0x622e4726a167799826d1E1D150b076A7725f5D81",tickLensAddress:"0xb52429333da969a0C79a60930a4Bf0020E5D1DE8"},F[exports.ChainId.ARBITRUM_SEPOLIA]={v3CoreFactoryAddress:"0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e",multicallAddress:"0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A",quoterAddress:"0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B",v3MigratorAddress:"0x398f43ef2c67B941147157DA1c5a868E906E043D",nonfungiblePositionManagerAddress:"0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65",tickLensAddress:"0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9",swapRouter02Address:"0x101F443B4d1b059569D643917553c771E1b9663E"},F[exports.ChainId.SEPOLIA]={v3CoreFactoryAddress:"0x0227628f3F023bb0B980b67D528571c95c6DaC1c",multicallAddress:"0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07",quoterAddress:"0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3",v3MigratorAddress:"0x729004182cF005CEC8Bd85df140094b6aCbe8b15",nonfungiblePositionManagerAddress:"0x1238536071E1c677A632429e3655c799b22cDA52",tickLensAddress:"0xd7f33bcdb21b359c8ee6f0251d30e94832baad07",swapRouter02Address:"0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E",mixedRouteQuoterV2Address:"0xa8b0be287acB850952DE4287b84B7222cc654C09"},F[exports.ChainId.AVALANCHE]={v3CoreFactoryAddress:"0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD",multicallAddress:"0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2",quoterAddress:"0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F",v3MigratorAddress:"0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97",nonfungiblePositionManagerAddress:"0x655C406EBFa14EE2006250925e54ec43AD184f8B",tickLensAddress:"0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950",swapRouter02Address:"0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE"},F[exports.ChainId.BASE]={v3CoreFactoryAddress:"0x33128a8fC17869897dcE68Ed026d694621f6FDfD",multicallAddress:"0x091e99cb1C49331a94dD62755D168E941AbD0693",quoterAddress:"0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a",v3MigratorAddress:"0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7",nonfungiblePositionManagerAddress:"0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1",tickLensAddress:"0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d",swapRouter02Address:"0x2626664c2603336E57B271c5C0b26F421741e481",mixedRouteQuoterV1Address:"0xe544efae946f0008ae9a8d64493efa7886b73776"},F[exports.ChainId.BASE_GOERLI]={v3CoreFactoryAddress:"0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2",multicallAddress:"0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439",quoterAddress:"0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9",v3MigratorAddress:"0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE",nonfungiblePositionManagerAddress:"0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30",tickLensAddress:"0x1acB873Ee909D0c98adB18e4474943249F931b92",swapRouter02Address:"0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d"},F[exports.ChainId.ZORA]={v3CoreFactoryAddress:"0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb",multicallAddress:"0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15",quoterAddress:"0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df",v3MigratorAddress:"0x048352d8dCF13686982C799da63fA6426a9D0b60",nonfungiblePositionManagerAddress:"0xbC91e8DfA3fF18De43853372A3d7dfe585137D78",tickLensAddress:"0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044",swapRouter02Address:"0x7De04c96BE5159c3b5CeffC82aa176dc81281557"},F[exports.ChainId.ZORA_SEPOLIA]={v3CoreFactoryAddress:"0x4324A677D74764f46f33ED447964252441aA8Db6",multicallAddress:"0xA1E7e3A69671C4494EC59Dbd442de930a93F911A",quoterAddress:"0xC195976fEF0985886E37036E2DF62bF371E12Df0",v3MigratorAddress:"0x65ef259b31bf1d977c37e9434658694267674897",nonfungiblePositionManagerAddress:"0xB8458EaAe43292e3c1F7994EFd016bd653d23c20",tickLensAddress:"0x23C0F71877a1Fc4e20A78018f9831365c85f3064"},F[exports.ChainId.ROOTSTOCK]={v3CoreFactoryAddress:"0xaF37EC98A00FD63689CF3060BF3B6784E00caD82",multicallAddress:"0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386",quoterAddress:"0xb51727c996C68E60F598A923a5006853cd2fEB31",v3MigratorAddress:"0x16678977CA4ec3DAD5efc7b15780295FE5f56162",nonfungiblePositionManagerAddress:"0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1",tickLensAddress:"0x55B9dF5bF68ADe972191a91980459f48ecA16afC",swapRouter02Address:"0x0B14ff67f0014046b4b99057Aec4509640b3947A"},F[exports.ChainId.BLAST]={v3CoreFactoryAddress:"0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd",multicallAddress:"0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705",quoterAddress:"0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77",v3MigratorAddress:"0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0",nonfungiblePositionManagerAddress:"0xB218e4f7cF0533d4696fDfC419A0023D33345F28",tickLensAddress:"0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274",swapRouter02Address:"0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66"},F[exports.ChainId.ZKSYNC]={v3CoreFactoryAddress:"0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422",multicallAddress:"0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C",quoterAddress:"0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28",v3MigratorAddress:"0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E",nonfungiblePositionManagerAddress:"0x0616e5762c1E7Dc3723c50663dF10a162D690a86",tickLensAddress:"0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89",swapRouter02Address:"0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3"},F[exports.ChainId.ABSTRACT_TESTNET]={v3CoreFactoryAddress:"0x2E17FF9b877661bDFEF8879a4B31665157a960F0",multicallAddress:"0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8",quoterAddress:"0xdE41045eb15C8352413199f35d6d1A32803DaaE2",v3MigratorAddress:"0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed",nonfungiblePositionManagerAddress:"0x069f199763c045A294C7913E64bA80E5F362A5d7",tickLensAddress:"0x2EC62f97506E0184C423B01c525ab36e1c61f78A",swapRouter02Address:"0xb9D4347d129a83cBC40499Cd4fF223dE172a70dF"},F[exports.ChainId.ZERO]={v3CoreFactoryAddress:"0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1",multicallAddress:"0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0",quoterAddress:"0x22B98c8Bdfea8D928101eEC40Af634ff37804997",v3MigratorAddress:"0x05eead9625966847d60774Cf2c3b004AfBC45314",nonfungiblePositionManagerAddress:"0x5b15468dFD83cF9192082d4510034c9431bb05eB",tickLensAddress:"0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E",swapRouter02Address:"0xD936711eABD2Ce52747d7122757316C7DFe3599b"},F[exports.ChainId.BOB]={v3CoreFactoryAddress:"0xcb2436774C3e191c85056d248EF4260ce5f27A9D",multicallAddress:"0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435",quoterAddress:"0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA",v3MigratorAddress:"0x0000000000000000000000000000000000000000",nonfungiblePositionManagerAddress:"0x743E03cceB4af2efA3CC76838f6E8B50B63F184c",tickLensAddress:"0xB3309C48F8407651D918ca3Da4C45DE40109E641",swapRouter02Address:"0x807F4E281B7A3B324825C64ca53c69F0b418dE40"},F[exports.ChainId.CYBER]={v3CoreFactoryAddress:"0x9701158fcF072c6852FD83B54D237e0cf5910C08",multicallAddress:"0x906d6eB9CF8f64e100e44f8f491b833a8d40B530",quoterAddress:"0xb7493d86A83eb7e4b57A3747013AaE82c907A58E",v3MigratorAddress:"0xc4D8Afb323C316DD7c91ddd4f818d5aCCd0661E3",nonfungiblePositionManagerAddress:"0xa5005349B7dcD9536832D97235675EF5Ae40f095",tickLensAddress:"0x6cb5504B957625d01a88db4b27EAaFD5Ae4422b6",swapRouter02Address:"0xdB4f0Db998BC1d429499fB11638fd3705E8e60Cc"},F[exports.ChainId.SHAPE]={v3CoreFactoryAddress:"0xeCf9288395797Da137f663a7DD0F0CDF918776F8",multicallAddress:"0x356A450B32f5030ae7083702b86FaFbBe7490411",quoterAddress:"0x5C5D397c5C5146559B709534dCDD81cB66617bBF",v3MigratorAddress:"0x584d740230343ED1Ac23A54Dc13f0a5213d5A2B4",nonfungiblePositionManagerAddress:"0xD29D14d0DbE2485E9f89305d5310CcD0D7a6DCb6",tickLensAddress:"0x4372c608a10b760C12E82029E5D4445721Cf4A51",swapRouter02Address:"0x32f6dCB405376B07b9D3d4C03015A5e329dD7D18"},F[exports.ChainId.INK]={v3CoreFactoryAddress:"0x640887A9ba3A9C53Ed27D0F7e8246A4F933f3424",multicallAddress:"0xA0fCec583AeE6176527C07B198e5561722332014",quoterAddress:"0x96b572D2d880cf2Fa2563651BD23ADE6f5516652",v3MigratorAddress:"0xdce28D2D5392e19091Fe59d9750B3202EbE80641",nonfungiblePositionManagerAddress:"0xC0836E5B058BBE22ae2266e1AC488A1A0fD8DCE8",tickLensAddress:"0x3e6Dba802d62aba2361Dd632fbC9f547AA6789aE",swapRouter02Address:"0x177778F19E89dD1012BdBe603F144088A95C4B53"},F[exports.ChainId.REDSTONE_GARNET]={v3CoreFactoryAddress:"0x338F6033D373F610510e0F285637Ef5DDA776742",multicallAddress:"0x320776fE9c8bed28dd6545A7B8e66114b7217153",quoterAddress:"0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e",v3MigratorAddress:"0x32d8273909300339d01c097E3A79eA522C0CCb47",nonfungiblePositionManagerAddress:"0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9",tickLensAddress:"0xe0e63e8a518b001A36FF8ac9F910CeC699D79c5A",swapRouter02Address:"0xfB60447BF76d38A36A140a0e427C3f0787Eb3e80"},F[exports.ChainId.REDSTONE]={v3CoreFactoryAddress:"0xece75613Aa9b1680f0421E5B2eF376DF68aa83Bb",multicallAddress:"0xd57B52452a0FDfE3ff8e0A40Bd10D00D0bfe0723",quoterAddress:"0x2986d9721A49838ab4297b695858aF7F17f38014",v3MigratorAddress:"0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9",nonfungiblePositionManagerAddress:"0x6Cdd7Ad7a1CacCe6163ed26BBA22E0A04dF41AD8",tickLensAddress:"0x600749AA1c493aB8656AD3aeFd2Fd645C7Ba2CdA",swapRouter02Address:"0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e"},F[exports.ChainId.ABSTRACT_MAINNET]={v3CoreFactoryAddress:"0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1",multicallAddress:"0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0",quoterAddress:"0x728BD3eC25D5EDBafebB84F3d67367Cd9EBC7693",v3MigratorAddress:"0x117Fc8DEf58147016f92bAE713533dDB828aBB7e",nonfungiblePositionManagerAddress:"0xfA928D3ABc512383b8E5E77edd2d5678696084F9",tickLensAddress:"0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E",swapRouter02Address:"0x7712FA47387542819d4E35A23f8116C90C18767C"},F[exports.ChainId.ANIME_TESTNET]={v3CoreFactoryAddress:"0xE6eA2A148c13893a8eEDD57c75043055a8924C5f",multicallAddress:"0x208960B3Bb6fa00bDcfa2cc9CdB8D412bbCe9f64",quoterAddress:"0x623d6b580eAeCbfC22E3ced2233D5598CBBC37F0",v3MigratorAddress:"0xc738ADA94944EC1d86C09c7204A428de35fb1CbF",nonfungiblePositionManagerAddress:"0x1cFbE77bb62CEca3778769655dEEC3ECC6AaaDf7",tickLensAddress:"0x086cD67c39646E95C1B9c4af4694Aa51A1a7636f",swapRouter02Address:"0x1Ed23A4791a0D1E112a67f5F42fd61d03b9dc261"},F),H=x({},O.reduce((function(e,r){return e[r]=k[r].v3CoreFactoryAddress,e}),{})),G=x({},O.reduce((function(e,r){var t=k[r].v3MigratorAddress;return t&&(e[r]=t),e}),{})),V=x({},O.reduce((function(e,r){return e[r]=k[r].multicallAddress,e}),{})),Y=S("0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F"),j=((l={})[exports.ChainId.MAINNET]="0xC4e172459f1E7939D522503B81AFAaC1014CE6F6",l),Z=((h={})[exports.ChainId.MAINNET]="0x408ED6354d4973f66138C91495F2f2FCbd8724C3",h),K=S("0x1a9C8182C09F50C8318d769245beA52c32BE35BC"),X=((I={})[exports.ChainId.MAINNET]="0x090D4613473dEE047c3f2706764f49E0821D256e",I),Q=((T={})[exports.ChainId.MAINNET]="0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8",T),J=x({},O.reduce((function(e,r){return e[r]=k[r].quoterAddress,e}),{})),z=x({},O.reduce((function(e,r){var t=k[r].nonfungiblePositionManagerAddress;return t&&(e[r]=t),e}),{})),$=x({},S("0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e")),ee=((R={})[exports.ChainId.MAINNET]="0x65770b5283117639760beA3F867b69b3697a91dd",R),re=x({},O.reduce((function(e,r){var t=k[r].tickLensAddress;return t&&(e[r]=t),e}),{})),te=O.reduce((function(e,r){var t=k[r].mixedRouteQuoterV1Address;return t&&(e[r]=t),e}),{});(N=exports.TradeType||(exports.TradeType={}))[N.EXACT_INPUT=0]="EXACT_INPUT",N[N.EXACT_OUTPUT=1]="EXACT_OUTPUT",(g=exports.Rounding||(exports.Rounding={}))[g.ROUND_DOWN=0]="ROUND_DOWN",g[g.ROUND_HALF_UP=1]="ROUND_HALF_UP",g[g.ROUND_UP=2]="ROUND_UP";var de,ae,ne=t.BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),se=s(a),oe=s(n),ie=((de={})[exports.Rounding.ROUND_DOWN]=se.ROUND_DOWN,de[exports.Rounding.ROUND_HALF_UP]=se.ROUND_HALF_UP,de[exports.Rounding.ROUND_UP]=se.ROUND_UP,de),Ae=((ae={})[exports.Rounding.ROUND_DOWN]=0,ae[exports.Rounding.ROUND_HALF_UP]=1,ae[exports.Rounding.ROUND_UP]=3,ae),ce=function(){function e(e,r){void 0===r&&(r=t.BigInt(1)),this.numerator=t.BigInt(e),this.denominator=t.BigInt(r)}e.tryParseFraction=function(r){if(r instanceof t||"number"==typeof r||"string"==typeof r)return new e(r);if("numerator"in r&&"denominator"in r)return r;throw new Error("Could not parse fraction")};var r=e.prototype;return r.invert=function(){return new e(this.denominator,this.numerator)},r.add=function(r){var d=e.tryParseFraction(r);return t.equal(this.denominator,d.denominator)?new e(t.add(this.numerator,d.numerator),this.denominator):new e(t.add(t.multiply(this.numerator,d.denominator),t.multiply(d.numerator,this.denominator)),t.multiply(this.denominator,d.denominator))},r.subtract=function(r){var d=e.tryParseFraction(r);return t.equal(this.denominator,d.denominator)?new e(t.subtract(this.numerator,d.numerator),this.denominator):new e(t.subtract(t.multiply(this.numerator,d.denominator),t.multiply(d.numerator,this.denominator)),t.multiply(this.denominator,d.denominator))},r.lessThan=function(r){var d=e.tryParseFraction(r);return t.lessThan(t.multiply(this.numerator,d.denominator),t.multiply(d.numerator,this.denominator))},r.equalTo=function(r){var d=e.tryParseFraction(r);return t.equal(t.multiply(this.numerator,d.denominator),t.multiply(d.numerator,this.denominator))},r.greaterThan=function(r){var d=e.tryParseFraction(r);return t.greaterThan(t.multiply(this.numerator,d.denominator),t.multiply(d.numerator,this.denominator))},r.multiply=function(r){var d=e.tryParseFraction(r);return new e(t.multiply(this.numerator,d.numerator),t.multiply(this.denominator,d.denominator))},r.divide=function(r){var d=e.tryParseFraction(r);return new e(t.multiply(this.numerator,d.denominator),t.multiply(this.denominator,d.numerator))},r.toSignificant=function(e,r,t){void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||d(!1),e>0||d(!1),se.set({precision:e+1,rounding:ie[t]});var a=new se(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(e);return a.toFormat(a.decimalPlaces(),r)},r.toFixed=function(e,r,t){return void 0===r&&(r={groupSeparator:""}),void 0===t&&(t=exports.Rounding.ROUND_HALF_UP),Number.isInteger(e)||d(!1),e>=0||d(!1),oe.DP=e,oe.RM=Ae[t],new oe(this.numerator.toString()).div(this.denominator.toString()).toFormat(e,r)},u(e,[{key:"quotient",get:function(){return t.divide(this.numerator,this.denominator)}},{key:"remainder",get:function(){return new e(t.remainder(this.numerator,this.denominator),this.denominator)}},{key:"asFraction",get:function(){return new e(this.numerator,this.denominator)}}]),e}(),Ee=s(n),Ce=function(e){function r(r,a,n){var s;return s=e.call(this,a,n)||this,t.lessThanOrEqual(s.quotient,ne)||d(!1),s.currency=r,s.decimalScale=t.exponentiate(t.BigInt(10),t.BigInt(r.decimals)),s}b(r,e),r.fromRawAmount=function(e,t){return new r(e,t)},r.fromFractionalAmount=function(e,t,d){return new r(e,t,d)};var a=r.prototype;return a.add=function(t){this.currency.equals(t.currency)||d(!1);var a=e.prototype.add.call(this,t);return r.fromFractionalAmount(this.currency,a.numerator,a.denominator)},a.subtract=function(t){this.currency.equals(t.currency)||d(!1);var a=e.prototype.subtract.call(this,t);return r.fromFractionalAmount(this.currency,a.numerator,a.denominator)},a.multiply=function(t){var d=e.prototype.multiply.call(this,t);return r.fromFractionalAmount(this.currency,d.numerator,d.denominator)},a.divide=function(t){var d=e.prototype.divide.call(this,t);return r.fromFractionalAmount(this.currency,d.numerator,d.denominator)},a.toSignificant=function(r,t,d){return void 0===r&&(r=6),void 0===d&&(d=exports.Rounding.ROUND_DOWN),e.prototype.divide.call(this,this.decimalScale).toSignificant(r,t,d)},a.toFixed=function(r,t,a){return void 0===r&&(r=this.currency.decimals),void 0===a&&(a=exports.Rounding.ROUND_DOWN),r<=this.currency.decimals||d(!1),e.prototype.divide.call(this,this.decimalScale).toFixed(r,t,a)},a.toExact=function(e){return void 0===e&&(e={groupSeparator:""}),Ee.DP=this.currency.decimals,new Ee(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(e)},u(r,[{key:"wrapped",get:function(){return this.currency.isToken?this:r.fromFractionalAmount(this.currency.wrapped,this.numerator,this.denominator)}}]),r}(ce),fe=new ce(t.BigInt(100));function ue(e){return new xe(e.numerator,e.denominator)}var xe=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isPercent=!0,r}b(r,e);var t=r.prototype;return t.add=function(r){return ue(e.prototype.add.call(this,r))},t.subtract=function(r){return ue(e.prototype.subtract.call(this,r))},t.multiply=function(r){return ue(e.prototype.multiply.call(this,r))},t.divide=function(r){return ue(e.prototype.divide.call(this,r))},t.toSignificant=function(r,t,d){return void 0===r&&(r=5),e.prototype.multiply.call(this,fe).toSignificant(r,t,d)},t.toFixed=function(r,t,d){return void 0===r&&(r=2),e.prototype.multiply.call(this,fe).toFixed(r,t,d)},r}(ce),be=function(e){function r(){for(var r,d,a,n,s,o=arguments.length,i=new Array(o),A=0;A<o;A++)i[A]=arguments[A];if(4===i.length)d=i[0],a=i[1],n=i[2],s=i[3];else{var c=i[0].quoteAmount.divide(i[0].baseAmount),E=[i[0].baseAmount.currency,i[0].quoteAmount.currency,c.denominator,c.numerator];d=E[0],a=E[1],n=E[2],s=E[3]}return(r=e.call(this,s,n)||this).baseCurrency=d,r.quoteCurrency=a,r.scalar=new ce(t.exponentiate(t.BigInt(10),t.BigInt(d.decimals)),t.exponentiate(t.BigInt(10),t.BigInt(a.decimals))),r}b(r,e);var a=r.prototype;return a.invert=function(){return new r(this.quoteCurrency,this.baseCurrency,this.numerator,this.denominator)},a.multiply=function(t){this.quoteCurrency.equals(t.baseCurrency)||d(!1);var a=e.prototype.multiply.call(this,t);return new r(this.baseCurrency,t.quoteCurrency,a.denominator,a.numerator)},a.quote=function(r){r.currency.equals(this.baseCurrency)||d(!1);var t=e.prototype.multiply.call(this,r);return Ce.fromFractionalAmount(this.quoteCurrency,t.numerator,t.denominator)},a.toSignificant=function(e,r,t){return void 0===e&&(e=6),this.adjustedForDecimals.toSignificant(e,r,t)},a.toFixed=function(e,r,t){return void 0===e&&(e=4),this.adjustedForDecimals.toFixed(e,r,t)},u(r,[{key:"adjustedForDecimals",get:function(){return e.prototype.multiply.call(this,this.scalar)}}]),r}(ce),Be=function(e,r,t,a){Number.isSafeInteger(e)||d(!1),r>=0&&r<255&&Number.isInteger(r)||d(!1),this.chainId=e,this.decimals=r,this.symbol=t,this.name=a},De=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).isNative=!0,r.isToken=!1,r}return b(r,e),r}(Be);function pe(e){try{return i.getAddress(e)}catch(r){throw new Error(e+" is not a valid address.")}}var Fe=/^0x[0-9a-fA-F]{40}$/,le=function(e){function r(r,t,a,n,s,i,A,c){var E;return(E=e.call(this,r,a,n,s)||this).isNative=!1,E.isToken=!0,E.address=i?function(e){if(Fe.test(e))return e;throw new Error(e+" is not a valid address.")}(t):pe(t),A&&(A.gte(o.BigNumber.from(0))||d(!1)),c&&(c.gte(o.BigNumber.from(0))||d(!1)),E.buyFeeBps=A,E.sellFeeBps=c,E}b(r,e);var t=r.prototype;return t.equals=function(e){return e.isToken&&this.chainId===e.chainId&&this.address.toLowerCase()===e.address.toLowerCase()},t.sortsBefore=function(e){return this.chainId!==e.chainId&&d(!1),this.address.toLowerCase()===e.address.toLowerCase()&&d(!1),this.address.toLowerCase()<e.address.toLowerCase()},u(r,[{key:"wrapped",get:function(){return this}}]),r}(Be),he={1:new le(1,"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",18,"WETH","Wrapped Ether"),3:new le(3,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),4:new le(4,"0xc778417E063141139Fce010982780140Aa0cD5Ab",18,"WETH","Wrapped Ether"),5:new le(5,"0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",18,"WETH","Wrapped Ether"),42:new le(42,"0xd0A1E359811322d97991E03f863a0C30C2cF029C",18,"WETH","Wrapped Ether"),10:new le(10,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),69:new le(69,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),11155420:new le(11155420,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),42161:new le(42161,"0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",18,"WETH","Wrapped Ether"),421611:new le(421611,"0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681",18,"WETH","Wrapped Ether"),421614:new le(421614,"0x980B62Da83eFf3D4576C647993b0c1D7faf17c73",18,"WETH","Wrapped Ether"),8453:new le(8453,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),56:new le(56,"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",18,"WBNB","Wrapped BNB"),137:new le(137,"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",18,"WMATIC","Wrapped MATIC"),43114:new le(43114,"0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",18,"WAVAX","Wrapped AVAX"),324:new le(324,"0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91",18,"WETH","Wrapped Ether"),11124:new le(11124,"0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d",18,"WETH","Wrapped Ether"),543210:new le(543210,"0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c",18,"WETH","Wrapped Ether"),60808:new le(60808,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),7560:new le(7560,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),360:new le(360,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),57073:new le(57073,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),690:new le(690,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),17069:new le(17069,"0x4200000000000000000000000000000000000006",18,"WETH","Wrapped Ether"),2741:new le(2741,"0x3439153EB7AF838Ad19d56E1571FBD09333C2809",18,"WETH","Wrapped Ether"),6900:new le(6900,"0x8f3e2785985aa4005c63f97f7cc89ce91a948267",18,"WETH","Wrapped Ether")},Ie=function(e){function r(r){return e.call(this,r,18,"ETH","Ether")||this}return b(r,e),r.onChain=function(e){var t;return null!=(t=this._etherCache[e])?t:this._etherCache[e]=new r(e)},r.prototype.equals=function(e){return e.isNative&&e.chainId===this.chainId},u(r,[{key:"wrapped",get:function(){var e=he[this.chainId];return e||d(!1),e}}]),r}(De);Ie._etherCache={};var Te=t.BigInt(Number.MAX_SAFE_INTEGER),Re=t.BigInt(0),Oe=t.BigInt(1),me=t.BigInt(2);exports.ARGENT_WALLET_DETECTOR_ADDRESS=Q,exports.CHAIN_TO_ADDRESSES_MAP=k,exports.CurrencyAmount=Ce,exports.ENS_REGISTRAR_ADDRESSES=$,exports.Ether=Ie,exports.Fraction=ce,exports.GOVERNANCE_ALPHA_V0_ADDRESSES=Y,exports.GOVERNANCE_ALPHA_V1_ADDRESSES=j,exports.GOVERNANCE_BRAVO_ADDRESSES=Z,exports.MERKLE_DISTRIBUTOR_ADDRESS=X,exports.MIXED_ROUTE_QUOTER_V1_ADDRESSES=te,exports.MULTICALL_ADDRESSES=V,exports.MaxUint256=ne,exports.NONFUNGIBLE_POSITION_MANAGER_ADDRESSES=z,exports.NativeCurrency=De,exports.Percent=xe,exports.Price=be,exports.QUOTER_ADDRESSES=J,exports.SOCKS_CONTROLLER_ADDRESSES=ee,exports.SUPPORTED_CHAINS=O,exports.SWAP_ROUTER_02_ADDRESSES=function(e){var r;return O.includes(e)?null!=(r=k[e].swapRouter02Address)?r:"0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45":""},exports.TICK_LENS_ADDRESSES=re,exports.TIMELOCK_ADDRESSES=K,exports.Token=le,exports.UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS="0x8B799381ac40b838BBA4131ffB26197C432AFe78",exports.UNI_ADDRESSES=v,exports.V2_FACTORY_ADDRESS="0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",exports.V2_FACTORY_ADDRESSES=M,exports.V2_ROUTER_ADDRESS="0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",exports.V2_ROUTER_ADDRESSES=y,exports.V3_CORE_FACTORY_ADDRESSES=H,exports.V3_MIGRATOR_ADDRESSES=G,exports.WETH9=he,exports.computePriceImpact=function(e,r,t){var d=e.quote(r),a=d.subtract(t).divide(d);return new xe(a.numerator,a.denominator)},exports.computeZksyncCreate2Address=function(e,r,t,d){void 0===d&&(d="0x");var a=c.keccak256(E.toUtf8Bytes("zksyncCreate2")),n=c.keccak256(d),s=c.keccak256(A.concat([a,A.hexZeroPad(e,32),t,r,n])).slice(26);return i.getAddress(s)},exports.sortedInsert=function(e,r,t,a){if(t>0||d(!1),e.length<=t||d(!1),0===e.length)return e.push(r),null;var n=e.length===t;if(n&&a(e[e.length-1],r)<=0)return r;for(var s=0,o=e.length;s<o;){var i=s+o>>>1;a(e[i],r)<=0?s=i+1:o=i}return e.splice(s,0,r),n?e.pop():null},exports.sqrt=function(e){if(t.greaterThanOrEqual(e,Re)||d(!1),t.lessThan(e,Te))return t.BigInt(Math.floor(Math.sqrt(t.toNumber(e))));var r,a;for(r=e,a=t.add(t.divide(e,me),Oe);t.lessThan(a,r);)r=a,a=t.divide(t.add(t.divide(e,a),a),me);return r},exports.validateAndParseAddress=pe;
 //# sourceMappingURL=sdk-core.cjs.production.min.js.map
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map
index d852e0c..8a25460 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/computeZksyncCreate2Address.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n  ZKSYNC = 324,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n  ChainId.ZKSYNC,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  mixedRouteQuoterV1Address?: string\n  mixedRouteQuoterV2Address?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\n  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.\n  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\n}\n\nconst ZKSYNC_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',\n  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',\n  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',\n  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',\n  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',\n  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',\n  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n  [ChainId.ZKSYNC]: ZKSYNC_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address\n  if (mixedRouteQuoterV1Address) {\n    memo[chainId] = mixedRouteQuoterV1Address\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  324: new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import { getAddress } from '@ethersproject/address'\nimport { BytesLike, concat, hexZeroPad } from '@ethersproject/bytes'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport { toUtf8Bytes } from '@ethersproject/strings'\n\nexport function computeZksyncCreate2Address(\n  sender: string,\n  bytecodeHash: BytesLike,\n  salt: BytesLike,\n  input: BytesLike = '0x'\n) {\n  const prefix = keccak256(toUtf8Bytes('zksyncCreate2'))\n  const inputHash = keccak256(input)\n  const addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26)\n  return getAddress(addressBytes)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","NativeCurrencyName","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","ZKSYNC","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","TradeType","Rounding","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","mixedRouteQuoterV1Address","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","swapRouter02Address","mixedRouteQuoterV2Address","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","this","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","buyFeeBps","sellFeeBps","test","checkValidAddress","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","1","3","4","5","42","10","69","11155420","42161","421611","421614","8453","56","137","43114","324","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ZERO","ONE","TWO","_CHAIN_TO_ADDRESSES_M2","includes","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sender","bytecodeHash","salt","input","prefix","keccak256","toUtf8Bytes","inputHash","addressBytes","hexZeroPad","slice","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/sqrt.ts","../src/utils/computePriceImpact.ts","../src/utils/computeZksyncCreate2Address.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n  ZKSYNC = 324,\n  ABSTRACT_TESTNET = 11124,\n  ABSTRACT_MAINNET = 2741,\n  ZERO = 543210,\n  BOB = 60808,\n  CYBER = 7560,\n  SHAPE = 360,\n  INK = 57073,\n  REDSTONE_GARNET = 17069,\n  REDSTONE = 690,\n  ANIME_TESTNET = 6900,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n  ChainId.ZKSYNC,\n  ChainId.ABSTRACT_TESTNET,\n  ChainId.ZERO,\n  ChainId.BOB,\n  ChainId.CYBER,\n  ChainId.SHAPE,\n  ChainId.INK,\n  ChainId.REDSTONE_GARNET,\n  ChainId.REDSTONE,\n  ChainId.ABSTRACT_MAINNET,\n  ChainId.ANIME_TESTNET,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  mixedRouteQuoterV1Address?: string\n  mixedRouteQuoterV2Address?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n  [ChainId.ABSTRACT_TESTNET]: '0xcD87b21B627cB2d695FBc2101cf64F8007F25E07',\n  [ChainId.ZERO]: '0x1B4427e212475B12e62f0f142b8AfEf3BC18B559',\n  [ChainId.CYBER]: '0x8AdDa31FE63696Ac64DED7D0Ea208102b1358c44',\n  [ChainId.SHAPE]: '0xb411eAF2f2070822B26E372E3Ea63c5060BA45E6',\n  [ChainId.INK]: '0xfe57A6BA1951F69aE2Ed4abe23e0f095DF500C04',\n  [ChainId.ABSTRACT_MAINNET]: '0x566d7510dEE58360a64C9827257cF6D0Dc43985E',\n  [ChainId.ANIME_TESTNET]: '0x69f2888491eA07BB10936aA110A5E0481122efd3',\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n  [ChainId.ABSTRACT_TESTNET]: '0x96ff7D9dbf52FdcAe79157d3b249282c7FABd409',\n  [ChainId.ZERO]: '0xD7C05A08cB43e99d596B606A1c03EA2F21289d94',\n  [ChainId.CYBER]: '0x58C90b5Dbc69963Fb0CAbee1163747FDBB7A8b18',\n  [ChainId.SHAPE]: '0x1f79AD8a85f570514e06Ff51BBffD540cCaB1249',\n  [ChainId.INK]: '0xB3FB126ACDd5AdCA2f50Ac644a7a2303745f18b4',\n  [ChainId.ABSTRACT_MAINNET]: '0xad1eCa41E6F772bE3cb5A48A6141f9bcc1AF9F7c',\n  [ChainId.ANIME_TESTNET]: '0x4F9f253Cc262fC82baD2d25BC1Ea7c67544535e3',\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\n  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.\n  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\n}\n\nconst ZKSYNC_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',\n  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',\n  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',\n  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',\n  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',\n  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',\n  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3',\n}\n\nconst ABSTRACT_TESTNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x2E17FF9b877661bDFEF8879a4B31665157a960F0',\n  multicallAddress: '0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8',\n  quoterAddress: '0xdE41045eb15C8352413199f35d6d1A32803DaaE2',\n  v3MigratorAddress: '0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed',\n  nonfungiblePositionManagerAddress: '0x069f199763c045A294C7913E64bA80E5F362A5d7',\n  tickLensAddress: '0x2EC62f97506E0184C423B01c525ab36e1c61f78A',\n  swapRouter02Address: '0xb9D4347d129a83cBC40499Cd4fF223dE172a70dF',\n}\n\nconst ZERO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',\n  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',\n  quoterAddress: '0x22B98c8Bdfea8D928101eEC40Af634ff37804997',\n  v3MigratorAddress: '0x05eead9625966847d60774Cf2c3b004AfBC45314',\n  nonfungiblePositionManagerAddress: '0x5b15468dFD83cF9192082d4510034c9431bb05eB',\n  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',\n  swapRouter02Address: '0xD936711eABD2Ce52747d7122757316C7DFe3599b',\n}\n\nconst BOB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xcb2436774C3e191c85056d248EF4260ce5f27A9D',\n  multicallAddress: '0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435',\n  quoterAddress: '0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA',\n  // Missing migrator address for BOB, using a place holder for now\n  v3MigratorAddress: '0x0000000000000000000000000000000000000000',\n  nonfungiblePositionManagerAddress: '0x743E03cceB4af2efA3CC76838f6E8B50B63F184c',\n  tickLensAddress: '0xB3309C48F8407651D918ca3Da4C45DE40109E641',\n  swapRouter02Address: '0x807F4E281B7A3B324825C64ca53c69F0b418dE40',\n}\n\nconst CYBER_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9701158fcF072c6852FD83B54D237e0cf5910C08',\n  multicallAddress: '0x906d6eB9CF8f64e100e44f8f491b833a8d40B530',\n  quoterAddress: '0xb7493d86A83eb7e4b57A3747013AaE82c907A58E',\n  v3MigratorAddress: '0xc4D8Afb323C316DD7c91ddd4f818d5aCCd0661E3',\n  nonfungiblePositionManagerAddress: '0xa5005349B7dcD9536832D97235675EF5Ae40f095',\n  tickLensAddress: '0x6cb5504B957625d01a88db4b27EAaFD5Ae4422b6',\n  swapRouter02Address: '0xdB4f0Db998BC1d429499fB11638fd3705E8e60Cc',\n}\nconst SHAPE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xeCf9288395797Da137f663a7DD0F0CDF918776F8',\n  multicallAddress: '0x356A450B32f5030ae7083702b86FaFbBe7490411',\n  quoterAddress: '0x5C5D397c5C5146559B709534dCDD81cB66617bBF',\n  v3MigratorAddress: '0x584d740230343ED1Ac23A54Dc13f0a5213d5A2B4',\n  nonfungiblePositionManagerAddress: '0xD29D14d0DbE2485E9f89305d5310CcD0D7a6DCb6',\n  tickLensAddress: '0x4372c608a10b760C12E82029E5D4445721Cf4A51',\n  swapRouter02Address: '0x32f6dCB405376B07b9D3d4C03015A5e329dD7D18',\n}\n\nconst INK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x640887A9ba3A9C53Ed27D0F7e8246A4F933f3424',\n  multicallAddress: '0xA0fCec583AeE6176527C07B198e5561722332014',\n  quoterAddress: '0x96b572D2d880cf2Fa2563651BD23ADE6f5516652',\n  v3MigratorAddress: '0xdce28D2D5392e19091Fe59d9750B3202EbE80641',\n  nonfungiblePositionManagerAddress: '0xC0836E5B058BBE22ae2266e1AC488A1A0fD8DCE8',\n  tickLensAddress: '0x3e6Dba802d62aba2361Dd632fbC9f547AA6789aE',\n  swapRouter02Address: '0x177778F19E89dD1012BdBe603F144088A95C4B53',\n}\n\nconst REDSTONE_GARNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x338F6033D373F610510e0F285637Ef5DDA776742',\n  multicallAddress: '0x320776fE9c8bed28dd6545A7B8e66114b7217153',\n  quoterAddress: '0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e',\n  v3MigratorAddress: '0x32d8273909300339d01c097E3A79eA522C0CCb47',\n  nonfungiblePositionManagerAddress: '0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9',\n  tickLensAddress: '0xe0e63e8a518b001A36FF8ac9F910CeC699D79c5A',\n  swapRouter02Address: '0xfB60447BF76d38A36A140a0e427C3f0787Eb3e80',\n}\n\nconst REDSTONE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xece75613Aa9b1680f0421E5B2eF376DF68aa83Bb',\n  multicallAddress: '0xd57B52452a0FDfE3ff8e0A40Bd10D00D0bfe0723',\n  quoterAddress: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n  v3MigratorAddress: '0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9',\n  nonfungiblePositionManagerAddress: '0x6Cdd7Ad7a1CacCe6163ed26BBA22E0A04dF41AD8',\n  tickLensAddress: '0x600749AA1c493aB8656AD3aeFd2Fd645C7Ba2CdA',\n  swapRouter02Address: '0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e',\n}\n\nconst ABSTRACT_MAINNET: ChainAddresses = {\n  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',\n  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',\n  quoterAddress: '0x728BD3eC25D5EDBafebB84F3d67367Cd9EBC7693',\n  v3MigratorAddress: '0x117Fc8DEf58147016f92bAE713533dDB828aBB7e',\n  nonfungiblePositionManagerAddress: '0xfA928D3ABc512383b8E5E77edd2d5678696084F9',\n  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',\n  swapRouter02Address: '0x7712FA47387542819d4E35A23f8116C90C18767C',\n}\n\nconst ANIME_TESTNET: ChainAddresses = {\n  v3CoreFactoryAddress: '0xE6eA2A148c13893a8eEDD57c75043055a8924C5f',\n  multicallAddress: '0x208960B3Bb6fa00bDcfa2cc9CdB8D412bbCe9f64',\n  quoterAddress: '0x623d6b580eAeCbfC22E3ced2233D5598CBBC37F0',\n  v3MigratorAddress: '0xc738ADA94944EC1d86C09c7204A428de35fb1CbF',\n  nonfungiblePositionManagerAddress: '0x1cFbE77bb62CEca3778769655dEEC3ECC6AaaDf7',\n  tickLensAddress: '0x086cD67c39646E95C1B9c4af4694Aa51A1a7636f',\n  swapRouter02Address: '0x1Ed23A4791a0D1E112a67f5F42fd61d03b9dc261',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n  [ChainId.ZKSYNC]: ZKSYNC_ADDRESSES,\n  [ChainId.ABSTRACT_TESTNET]: ABSTRACT_TESTNET_ADDRESSES,\n  [ChainId.ZERO]: ZERO_ADDRESSES,\n  [ChainId.BOB]: BOB_ADDRESSES,\n  [ChainId.CYBER]: CYBER_ADDRESSES,\n  [ChainId.SHAPE]: SHAPE_ADDRESSES,\n  [ChainId.INK]: INK_ADDRESSES,\n  [ChainId.REDSTONE_GARNET]: REDSTONE_GARNET_ADDRESSES,\n  [ChainId.REDSTONE]: REDSTONE_ADDRESSES,\n  [ChainId.ABSTRACT_MAINNET]: ABSTRACT_MAINNET,\n  [ChainId.ANIME_TESTNET]: ANIME_TESTNET,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address\n  if (mixedRouteQuoterV1Address) {\n    memo[chainId] = mixedRouteQuoterV1Address\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  324: new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),\n  11124: new Token(11124, '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d', 18, 'WETH', 'Wrapped Ether'),\n  543210: new Token(543210, '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c', 18, 'WETH', 'Wrapped Ether'),\n  60808: new Token(60808, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  7560: new Token(7560, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  360: new Token(360, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  57073: new Token(57073, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  690: new Token(690, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  17069: new Token(17069, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  2741: new Token(2741, '0x3439153EB7AF838Ad19d56E1571FBD09333C2809', 18, 'WETH', 'Wrapped Ether'),\n  6900: new Token(6900, '0x8f3e2785985aa4005c63f97f7cc89ce91a948267', 18, 'WETH', 'Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import { getAddress } from '@ethersproject/address'\nimport { BytesLike, concat, hexZeroPad } from '@ethersproject/bytes'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport { toUtf8Bytes } from '@ethersproject/strings'\n\nexport function computeZksyncCreate2Address(\n  sender: string,\n  bytecodeHash: BytesLike,\n  salt: BytesLike,\n  input: BytesLike = '0x'\n) {\n  const prefix = keccak256(toUtf8Bytes('zksyncCreate2'))\n  const inputHash = keccak256(input)\n  const addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26)\n  return getAddress(addressBytes)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","NativeCurrencyName","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","ZKSYNC","ABSTRACT_TESTNET","ZERO","BOB","CYBER","SHAPE","INK","REDSTONE_GARNET","REDSTONE","ABSTRACT_MAINNET","ANIME_TESTNET","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","TradeType","Rounding","UNI_ADDRESSES","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","mixedRouteQuoterV1Address","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","swapRouter02Address","mixedRouteQuoterV2Address","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","this","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","Token","bypassChecksum","buyFeeBps","sellFeeBps","test","checkValidAddress","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","1","3","4","5","42","10","69","11155420","42161","421611","421614","8453","56","137","43114","324","11124","543210","60808","7560","360","57073","690","17069","2741","6900","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","MAX_SAFE_INTEGER","ONE","TWO","_CHAIN_TO_ADDRESSES_M2","includes","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sender","bytecodeHash","salt","input","prefix","keccak256","toUtf8Bytes","inputHash","addressBytes","hexZeroPad","slice","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js
index 7a5284e..4c9abfe 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js
@@ -93,8 +93,18 @@ var ChainId;
   ChainId[ChainId["ROOTSTOCK"] = 30] = "ROOTSTOCK";
   ChainId[ChainId["BLAST"] = 81457] = "BLAST";
   ChainId[ChainId["ZKSYNC"] = 324] = "ZKSYNC";
+  ChainId[ChainId["ABSTRACT_TESTNET"] = 11124] = "ABSTRACT_TESTNET";
+  ChainId[ChainId["ABSTRACT_MAINNET"] = 2741] = "ABSTRACT_MAINNET";
+  ChainId[ChainId["ZERO"] = 543210] = "ZERO";
+  ChainId[ChainId["BOB"] = 60808] = "BOB";
+  ChainId[ChainId["CYBER"] = 7560] = "CYBER";
+  ChainId[ChainId["SHAPE"] = 360] = "SHAPE";
+  ChainId[ChainId["INK"] = 57073] = "INK";
+  ChainId[ChainId["REDSTONE_GARNET"] = 17069] = "REDSTONE_GARNET";
+  ChainId[ChainId["REDSTONE"] = 690] = "REDSTONE";
+  ChainId[ChainId["ANIME_TESTNET"] = 6900] = "ANIME_TESTNET";
 })(ChainId || (ChainId = {}));
-var SUPPORTED_CHAINS = [ChainId.MAINNET, ChainId.OPTIMISM, ChainId.OPTIMISM_GOERLI, ChainId.OPTIMISM_SEPOLIA, ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI, ChainId.ARBITRUM_SEPOLIA, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.GOERLI, ChainId.SEPOLIA, ChainId.CELO_ALFAJORES, ChainId.CELO, ChainId.BNB, ChainId.AVALANCHE, ChainId.BASE, ChainId.BASE_GOERLI, ChainId.ZORA, ChainId.ZORA_SEPOLIA, ChainId.ROOTSTOCK, ChainId.BLAST, ChainId.ZKSYNC];
+var SUPPORTED_CHAINS = [ChainId.MAINNET, ChainId.OPTIMISM, ChainId.OPTIMISM_GOERLI, ChainId.OPTIMISM_SEPOLIA, ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_GOERLI, ChainId.ARBITRUM_SEPOLIA, ChainId.POLYGON, ChainId.POLYGON_MUMBAI, ChainId.GOERLI, ChainId.SEPOLIA, ChainId.CELO_ALFAJORES, ChainId.CELO, ChainId.BNB, ChainId.AVALANCHE, ChainId.BASE, ChainId.BASE_GOERLI, ChainId.ZORA, ChainId.ZORA_SEPOLIA, ChainId.ROOTSTOCK, ChainId.BLAST, ChainId.ZKSYNC, ChainId.ABSTRACT_TESTNET, ChainId.ZERO, ChainId.BOB, ChainId.CYBER, ChainId.SHAPE, ChainId.INK, ChainId.REDSTONE_GARNET, ChainId.REDSTONE, ChainId.ABSTRACT_MAINNET, ChainId.ANIME_TESTNET];
 var NativeCurrencyName;
 (function (NativeCurrencyName) {
   // Strings match input for CLI
@@ -125,12 +135,12 @@ var UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AF
  * @deprecated use V2_FACTORY_ADDRESSES instead
  */
 var V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';
-var V2_FACTORY_ADDRESSES = (_V2_FACTORY_ADDRESSES = {}, _V2_FACTORY_ADDRESSES[ChainId.MAINNET] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[ChainId.GOERLI] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[ChainId.SEPOLIA] = '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0', _V2_FACTORY_ADDRESSES[ChainId.OPTIMISM] = '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf', _V2_FACTORY_ADDRESSES[ChainId.ARBITRUM_ONE] = '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9', _V2_FACTORY_ADDRESSES[ChainId.AVALANCHE] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[ChainId.BASE] = '0x8909dc15e40173ff4699343b6eb8132c65e18ec6', _V2_FACTORY_ADDRESSES[ChainId.BNB] = '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6', _V2_FACTORY_ADDRESSES[ChainId.POLYGON] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[ChainId.CELO] = '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f', _V2_FACTORY_ADDRESSES[ChainId.BLAST] = '0x5C346464d33F90bABaf70dB6388507CC889C1070', _V2_FACTORY_ADDRESSES);
+var V2_FACTORY_ADDRESSES = (_V2_FACTORY_ADDRESSES = {}, _V2_FACTORY_ADDRESSES[ChainId.MAINNET] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[ChainId.GOERLI] = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f', _V2_FACTORY_ADDRESSES[ChainId.SEPOLIA] = '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0', _V2_FACTORY_ADDRESSES[ChainId.OPTIMISM] = '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf', _V2_FACTORY_ADDRESSES[ChainId.ARBITRUM_ONE] = '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9', _V2_FACTORY_ADDRESSES[ChainId.AVALANCHE] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[ChainId.BASE] = '0x8909dc15e40173ff4699343b6eb8132c65e18ec6', _V2_FACTORY_ADDRESSES[ChainId.BNB] = '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6', _V2_FACTORY_ADDRESSES[ChainId.POLYGON] = '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C', _V2_FACTORY_ADDRESSES[ChainId.CELO] = '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f', _V2_FACTORY_ADDRESSES[ChainId.BLAST] = '0x5C346464d33F90bABaf70dB6388507CC889C1070', _V2_FACTORY_ADDRESSES[ChainId.ABSTRACT_TESTNET] = '0xcD87b21B627cB2d695FBc2101cf64F8007F25E07', _V2_FACTORY_ADDRESSES[ChainId.ZERO] = '0x1B4427e212475B12e62f0f142b8AfEf3BC18B559', _V2_FACTORY_ADDRESSES[ChainId.CYBER] = '0x8AdDa31FE63696Ac64DED7D0Ea208102b1358c44', _V2_FACTORY_ADDRESSES[ChainId.SHAPE] = '0xb411eAF2f2070822B26E372E3Ea63c5060BA45E6', _V2_FACTORY_ADDRESSES[ChainId.INK] = '0xfe57A6BA1951F69aE2Ed4abe23e0f095DF500C04', _V2_FACTORY_ADDRESSES[ChainId.ABSTRACT_MAINNET] = '0x566d7510dEE58360a64C9827257cF6D0Dc43985E', _V2_FACTORY_ADDRESSES[ChainId.ANIME_TESTNET] = '0x69f2888491eA07BB10936aA110A5E0481122efd3', _V2_FACTORY_ADDRESSES);
 /**
  * @deprecated use V2_ROUTER_ADDRESSES instead
  */
 var V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';
-var V2_ROUTER_ADDRESSES = (_V2_ROUTER_ADDRESSES = {}, _V2_ROUTER_ADDRESSES[ChainId.MAINNET] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[ChainId.GOERLI] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[ChainId.ARBITRUM_ONE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.OPTIMISM] = '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2', _V2_ROUTER_ADDRESSES[ChainId.BASE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.AVALANCHE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.BNB] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.POLYGON] = '0xedf6066a2b290c185783862c7f4776a2c8077ad1', _V2_ROUTER_ADDRESSES[ChainId.BLAST] = '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035', _V2_ROUTER_ADDRESSES);
+var V2_ROUTER_ADDRESSES = (_V2_ROUTER_ADDRESSES = {}, _V2_ROUTER_ADDRESSES[ChainId.MAINNET] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[ChainId.GOERLI] = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D', _V2_ROUTER_ADDRESSES[ChainId.ARBITRUM_ONE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.OPTIMISM] = '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2', _V2_ROUTER_ADDRESSES[ChainId.BASE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.AVALANCHE] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.BNB] = '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24', _V2_ROUTER_ADDRESSES[ChainId.POLYGON] = '0xedf6066a2b290c185783862c7f4776a2c8077ad1', _V2_ROUTER_ADDRESSES[ChainId.BLAST] = '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035', _V2_ROUTER_ADDRESSES[ChainId.ABSTRACT_TESTNET] = '0x96ff7D9dbf52FdcAe79157d3b249282c7FABd409', _V2_ROUTER_ADDRESSES[ChainId.ZERO] = '0xD7C05A08cB43e99d596B606A1c03EA2F21289d94', _V2_ROUTER_ADDRESSES[ChainId.CYBER] = '0x58C90b5Dbc69963Fb0CAbee1163747FDBB7A8b18', _V2_ROUTER_ADDRESSES[ChainId.SHAPE] = '0x1f79AD8a85f570514e06Ff51BBffD540cCaB1249', _V2_ROUTER_ADDRESSES[ChainId.INK] = '0xB3FB126ACDd5AdCA2f50Ac644a7a2303745f18b4', _V2_ROUTER_ADDRESSES[ChainId.ABSTRACT_MAINNET] = '0xad1eCa41E6F772bE3cb5A48A6141f9bcc1AF9F7c', _V2_ROUTER_ADDRESSES[ChainId.ANIME_TESTNET] = '0x4F9f253Cc262fC82baD2d25BC1Ea7c67544535e3', _V2_ROUTER_ADDRESSES);
 // Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon
 var DEFAULT_ADDRESSES = {
   v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',
@@ -294,7 +304,98 @@ var ZKSYNC_ADDRESSES = {
   tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',
   swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3'
 };
-var CHAIN_TO_ADDRESSES_MAP = (_CHAIN_TO_ADDRESSES_M = {}, _CHAIN_TO_ADDRESSES_M[ChainId.MAINNET] = MAINNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM] = OPTIMISM_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_ONE] = ARBITRUM_ONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.POLYGON] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.POLYGON_MUMBAI] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.GOERLI] = GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CELO] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CELO_ALFAJORES] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BNB] = BNB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM_GOERLI] = OPTIMISM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM_SEPOLIA] = OPTIMISM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_GOERLI] = ARBITRUM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_SEPOLIA] = ARBITRUM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.SEPOLIA] = SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.AVALANCHE] = AVALANCHE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BASE] = BASE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BASE_GOERLI] = BASE_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZORA] = ZORA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZORA_SEPOLIA] = ZORA_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ROOTSTOCK] = ROOTSTOCK_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BLAST] = BLAST_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZKSYNC] = ZKSYNC_ADDRESSES, _CHAIN_TO_ADDRESSES_M);
+var ABSTRACT_TESTNET_ADDRESSES = {
+  v3CoreFactoryAddress: '0x2E17FF9b877661bDFEF8879a4B31665157a960F0',
+  multicallAddress: '0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8',
+  quoterAddress: '0xdE41045eb15C8352413199f35d6d1A32803DaaE2',
+  v3MigratorAddress: '0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed',
+  nonfungiblePositionManagerAddress: '0x069f199763c045A294C7913E64bA80E5F362A5d7',
+  tickLensAddress: '0x2EC62f97506E0184C423B01c525ab36e1c61f78A',
+  swapRouter02Address: '0xb9D4347d129a83cBC40499Cd4fF223dE172a70dF'
+};
+var ZERO_ADDRESSES = {
+  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',
+  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',
+  quoterAddress: '0x22B98c8Bdfea8D928101eEC40Af634ff37804997',
+  v3MigratorAddress: '0x05eead9625966847d60774Cf2c3b004AfBC45314',
+  nonfungiblePositionManagerAddress: '0x5b15468dFD83cF9192082d4510034c9431bb05eB',
+  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',
+  swapRouter02Address: '0xD936711eABD2Ce52747d7122757316C7DFe3599b'
+};
+var BOB_ADDRESSES = {
+  v3CoreFactoryAddress: '0xcb2436774C3e191c85056d248EF4260ce5f27A9D',
+  multicallAddress: '0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435',
+  quoterAddress: '0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA',
+  // Missing migrator address for BOB, using a place holder for now
+  v3MigratorAddress: '0x0000000000000000000000000000000000000000',
+  nonfungiblePositionManagerAddress: '0x743E03cceB4af2efA3CC76838f6E8B50B63F184c',
+  tickLensAddress: '0xB3309C48F8407651D918ca3Da4C45DE40109E641',
+  swapRouter02Address: '0x807F4E281B7A3B324825C64ca53c69F0b418dE40'
+};
+var CYBER_ADDRESSES = {
+  v3CoreFactoryAddress: '0x9701158fcF072c6852FD83B54D237e0cf5910C08',
+  multicallAddress: '0x906d6eB9CF8f64e100e44f8f491b833a8d40B530',
+  quoterAddress: '0xb7493d86A83eb7e4b57A3747013AaE82c907A58E',
+  v3MigratorAddress: '0xc4D8Afb323C316DD7c91ddd4f818d5aCCd0661E3',
+  nonfungiblePositionManagerAddress: '0xa5005349B7dcD9536832D97235675EF5Ae40f095',
+  tickLensAddress: '0x6cb5504B957625d01a88db4b27EAaFD5Ae4422b6',
+  swapRouter02Address: '0xdB4f0Db998BC1d429499fB11638fd3705E8e60Cc'
+};
+var SHAPE_ADDRESSES = {
+  v3CoreFactoryAddress: '0xeCf9288395797Da137f663a7DD0F0CDF918776F8',
+  multicallAddress: '0x356A450B32f5030ae7083702b86FaFbBe7490411',
+  quoterAddress: '0x5C5D397c5C5146559B709534dCDD81cB66617bBF',
+  v3MigratorAddress: '0x584d740230343ED1Ac23A54Dc13f0a5213d5A2B4',
+  nonfungiblePositionManagerAddress: '0xD29D14d0DbE2485E9f89305d5310CcD0D7a6DCb6',
+  tickLensAddress: '0x4372c608a10b760C12E82029E5D4445721Cf4A51',
+  swapRouter02Address: '0x32f6dCB405376B07b9D3d4C03015A5e329dD7D18'
+};
+var INK_ADDRESSES = {
+  v3CoreFactoryAddress: '0x640887A9ba3A9C53Ed27D0F7e8246A4F933f3424',
+  multicallAddress: '0xA0fCec583AeE6176527C07B198e5561722332014',
+  quoterAddress: '0x96b572D2d880cf2Fa2563651BD23ADE6f5516652',
+  v3MigratorAddress: '0xdce28D2D5392e19091Fe59d9750B3202EbE80641',
+  nonfungiblePositionManagerAddress: '0xC0836E5B058BBE22ae2266e1AC488A1A0fD8DCE8',
+  tickLensAddress: '0x3e6Dba802d62aba2361Dd632fbC9f547AA6789aE',
+  swapRouter02Address: '0x177778F19E89dD1012BdBe603F144088A95C4B53'
+};
+var REDSTONE_GARNET_ADDRESSES = {
+  v3CoreFactoryAddress: '0x338F6033D373F610510e0F285637Ef5DDA776742',
+  multicallAddress: '0x320776fE9c8bed28dd6545A7B8e66114b7217153',
+  quoterAddress: '0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e',
+  v3MigratorAddress: '0x32d8273909300339d01c097E3A79eA522C0CCb47',
+  nonfungiblePositionManagerAddress: '0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9',
+  tickLensAddress: '0xe0e63e8a518b001A36FF8ac9F910CeC699D79c5A',
+  swapRouter02Address: '0xfB60447BF76d38A36A140a0e427C3f0787Eb3e80'
+};
+var REDSTONE_ADDRESSES = {
+  v3CoreFactoryAddress: '0xece75613Aa9b1680f0421E5B2eF376DF68aa83Bb',
+  multicallAddress: '0xd57B52452a0FDfE3ff8e0A40Bd10D00D0bfe0723',
+  quoterAddress: '0x2986d9721A49838ab4297b695858aF7F17f38014',
+  v3MigratorAddress: '0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9',
+  nonfungiblePositionManagerAddress: '0x6Cdd7Ad7a1CacCe6163ed26BBA22E0A04dF41AD8',
+  tickLensAddress: '0x600749AA1c493aB8656AD3aeFd2Fd645C7Ba2CdA',
+  swapRouter02Address: '0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e'
+};
+var ABSTRACT_MAINNET = {
+  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',
+  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',
+  quoterAddress: '0x728BD3eC25D5EDBafebB84F3d67367Cd9EBC7693',
+  v3MigratorAddress: '0x117Fc8DEf58147016f92bAE713533dDB828aBB7e',
+  nonfungiblePositionManagerAddress: '0xfA928D3ABc512383b8E5E77edd2d5678696084F9',
+  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',
+  swapRouter02Address: '0x7712FA47387542819d4E35A23f8116C90C18767C'
+};
+var ANIME_TESTNET = {
+  v3CoreFactoryAddress: '0xE6eA2A148c13893a8eEDD57c75043055a8924C5f',
+  multicallAddress: '0x208960B3Bb6fa00bDcfa2cc9CdB8D412bbCe9f64',
+  quoterAddress: '0x623d6b580eAeCbfC22E3ced2233D5598CBBC37F0',
+  v3MigratorAddress: '0xc738ADA94944EC1d86C09c7204A428de35fb1CbF',
+  nonfungiblePositionManagerAddress: '0x1cFbE77bb62CEca3778769655dEEC3ECC6AaaDf7',
+  tickLensAddress: '0x086cD67c39646E95C1B9c4af4694Aa51A1a7636f',
+  swapRouter02Address: '0x1Ed23A4791a0D1E112a67f5F42fd61d03b9dc261'
+};
+var CHAIN_TO_ADDRESSES_MAP = (_CHAIN_TO_ADDRESSES_M = {}, _CHAIN_TO_ADDRESSES_M[ChainId.MAINNET] = MAINNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM] = OPTIMISM_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_ONE] = ARBITRUM_ONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.POLYGON] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.POLYGON_MUMBAI] = POLYGON_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.GOERLI] = GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CELO] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CELO_ALFAJORES] = CELO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BNB] = BNB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM_GOERLI] = OPTIMISM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.OPTIMISM_SEPOLIA] = OPTIMISM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_GOERLI] = ARBITRUM_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ARBITRUM_SEPOLIA] = ARBITRUM_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.SEPOLIA] = SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.AVALANCHE] = AVALANCHE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BASE] = BASE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BASE_GOERLI] = BASE_GOERLI_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZORA] = ZORA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZORA_SEPOLIA] = ZORA_SEPOLIA_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ROOTSTOCK] = ROOTSTOCK_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BLAST] = BLAST_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZKSYNC] = ZKSYNC_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ABSTRACT_TESTNET] = ABSTRACT_TESTNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ZERO] = ZERO_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.BOB] = BOB_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.CYBER] = CYBER_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.SHAPE] = SHAPE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.INK] = INK_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.REDSTONE_GARNET] = REDSTONE_GARNET_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.REDSTONE] = REDSTONE_ADDRESSES, _CHAIN_TO_ADDRESSES_M[ChainId.ABSTRACT_MAINNET] = ABSTRACT_MAINNET, _CHAIN_TO_ADDRESSES_M[ChainId.ANIME_TESTNET] = ANIME_TESTNET, _CHAIN_TO_ADDRESSES_M);
 /* V3 Contract Addresses */
 var V3_CORE_FACTORY_ADDRESSES = /*#__PURE__*/_extends({}, /*#__PURE__*/SUPPORTED_CHAINS.reduce(function (memo, chainId) {
   memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress;
@@ -847,7 +948,17 @@ var WETH9 = {
   56: /*#__PURE__*/new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),
   137: /*#__PURE__*/new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),
   43114: /*#__PURE__*/new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),
-  324: /*#__PURE__*/new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether')
+  324: /*#__PURE__*/new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),
+  11124: /*#__PURE__*/new Token(11124, '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d', 18, 'WETH', 'Wrapped Ether'),
+  543210: /*#__PURE__*/new Token(543210, '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c', 18, 'WETH', 'Wrapped Ether'),
+  60808: /*#__PURE__*/new Token(60808, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  7560: /*#__PURE__*/new Token(7560, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  360: /*#__PURE__*/new Token(360, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  57073: /*#__PURE__*/new Token(57073, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  690: /*#__PURE__*/new Token(690, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  17069: /*#__PURE__*/new Token(17069, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),
+  2741: /*#__PURE__*/new Token(2741, '0x3439153EB7AF838Ad19d56E1571FBD09333C2809', 18, 'WETH', 'Wrapped Ether'),
+  6900: /*#__PURE__*/new Token(6900, '0x8f3e2785985aa4005c63f97f7cc89ce91a948267', 18, 'WETH', 'Wrapped Ether')
 };
 
 /**
diff --git a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map
index 4a959cf..e93673d 100644
--- a/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map
+++ b/node_modules/@uniswap/sdk-core/dist/sdk-core.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"sdk-core.esm.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/computeZksyncCreate2Address.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n  ZKSYNC = 324,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n  ChainId.ZKSYNC,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  mixedRouteQuoterV1Address?: string\n  mixedRouteQuoterV2Address?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\n  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.\n  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\n}\n\nconst ZKSYNC_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',\n  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',\n  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',\n  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',\n  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',\n  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',\n  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n  [ChainId.ZKSYNC]: ZKSYNC_ADDRESSES,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address\n  if (mixedRouteQuoterV1Address) {\n    memo[chainId] = mixedRouteQuoterV1Address\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  324: new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import { getAddress } from '@ethersproject/address'\nimport { BytesLike, concat, hexZeroPad } from '@ethersproject/bytes'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport { toUtf8Bytes } from '@ethersproject/strings'\n\nexport function computeZksyncCreate2Address(\n  sender: string,\n  bytecodeHash: BytesLike,\n  salt: BytesLike,\n  input: BytesLike = '0x'\n) {\n  const prefix = keccak256(toUtf8Bytes('zksyncCreate2'))\n  const inputHash = keccak256(input)\n  const addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26)\n  return getAddress(addressBytes)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","ZKSYNC","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","mixedRouteQuoterV1Address","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","mixedRouteQuoterV2Address","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","ZKSYNC_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","_CHAIN_TO_ADDRESSES_M2","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","env","NODE_ENV","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","_inheritsLoose","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","computeZksyncCreate2Address","sender","bytecodeHash","salt","input","prefix","keccak256","toUtf8Bytes","inputHash","addressBytes","hexZeroPad","slice","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"sdk-core.esm.js","sources":["../src/chains.ts","../src/addresses.ts","../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/computeZksyncCreate2Address.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["export enum ChainId {\n  MAINNET = 1,\n  GOERLI = 5,\n  SEPOLIA = 11155111,\n  OPTIMISM = 10,\n  OPTIMISM_GOERLI = 420,\n  OPTIMISM_SEPOLIA = 11155420,\n  ARBITRUM_ONE = 42161,\n  ARBITRUM_GOERLI = 421613,\n  ARBITRUM_SEPOLIA = 421614,\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n  CELO = 42220,\n  CELO_ALFAJORES = 44787,\n  GNOSIS = 100,\n  MOONBEAM = 1284,\n  BNB = 56,\n  AVALANCHE = 43114,\n  BASE_GOERLI = 84531,\n  BASE = 8453,\n  ZORA = 7777777,\n  ZORA_SEPOLIA = 999999999,\n  ROOTSTOCK = 30,\n  BLAST = 81457,\n  ZKSYNC = 324,\n  ABSTRACT_TESTNET = 11124,\n  ABSTRACT_MAINNET = 2741,\n  ZERO = 543210,\n  BOB = 60808,\n  CYBER = 7560,\n  SHAPE = 360,\n  INK = 57073,\n  REDSTONE_GARNET = 17069,\n  REDSTONE = 690,\n  ANIME_TESTNET = 6900,\n}\n\nexport const SUPPORTED_CHAINS = [\n  ChainId.MAINNET,\n  ChainId.OPTIMISM,\n  ChainId.OPTIMISM_GOERLI,\n  ChainId.OPTIMISM_SEPOLIA,\n  ChainId.ARBITRUM_ONE,\n  ChainId.ARBITRUM_GOERLI,\n  ChainId.ARBITRUM_SEPOLIA,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.GOERLI,\n  ChainId.SEPOLIA,\n  ChainId.CELO_ALFAJORES,\n  ChainId.CELO,\n  ChainId.BNB,\n  ChainId.AVALANCHE,\n  ChainId.BASE,\n  ChainId.BASE_GOERLI,\n  ChainId.ZORA,\n  ChainId.ZORA_SEPOLIA,\n  ChainId.ROOTSTOCK,\n  ChainId.BLAST,\n  ChainId.ZKSYNC,\n  ChainId.ABSTRACT_TESTNET,\n  ChainId.ZERO,\n  ChainId.BOB,\n  ChainId.CYBER,\n  ChainId.SHAPE,\n  ChainId.INK,\n  ChainId.REDSTONE_GARNET,\n  ChainId.REDSTONE,\n  ChainId.ABSTRACT_MAINNET,\n  ChainId.ANIME_TESTNET,\n] as const\nexport type SupportedChainsType = (typeof SUPPORTED_CHAINS)[number]\n\nexport enum NativeCurrencyName {\n  // Strings match input for CLI\n  ETHER = 'ETH',\n  MATIC = 'MATIC',\n  CELO = 'CELO',\n  GNOSIS = 'XDAI',\n  MOONBEAM = 'GLMR',\n  BNB = 'BNB',\n  AVAX = 'AVAX',\n  ROOTSTOCK = 'RBTC',\n}\n","import { ChainId, SUPPORTED_CHAINS, SupportedChainsType } from './chains'\n\ntype AddressMap = { [chainId: number]: string }\n\ntype ChainAddresses = {\n  v3CoreFactoryAddress: string\n  multicallAddress: string\n  quoterAddress: string\n  v3MigratorAddress?: string\n  nonfungiblePositionManagerAddress?: string\n  tickLensAddress?: string\n  swapRouter02Address?: string\n  mixedRouteQuoterV1Address?: string\n  mixedRouteQuoterV2Address?: string\n}\n\nconst DEFAULT_NETWORKS = [ChainId.MAINNET, ChainId.GOERLI, ChainId.SEPOLIA]\n\nfunction constructSameAddressMap(address: string, additionalNetworks: ChainId[] = []): AddressMap {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n\nexport const UNI_ADDRESSES: AddressMap = constructSameAddressMap('0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984', [\n  ChainId.OPTIMISM,\n  ChainId.ARBITRUM_ONE,\n  ChainId.POLYGON,\n  ChainId.POLYGON_MUMBAI,\n  ChainId.SEPOLIA,\n])\n\nexport const UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS = '0x8B799381ac40b838BBA4131ffB26197C432AFe78'\n\n/**\n * @deprecated use V2_FACTORY_ADDRESSES instead\n */\nexport const V2_FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\nexport const V2_FACTORY_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.GOERLI]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n  [ChainId.SEPOLIA]: '0xB7f907f7A9eBC822a80BD25E224be42Ce0A698A0',\n  [ChainId.OPTIMISM]: '0x0c3c1c532F1e39EdF36BE9Fe0bE1410313E074Bf',\n  [ChainId.ARBITRUM_ONE]: '0xf1D7CC64Fb4452F05c498126312eBE29f30Fbcf9',\n  [ChainId.AVALANCHE]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.BASE]: '0x8909dc15e40173ff4699343b6eb8132c65e18ec6',\n  [ChainId.BNB]: '0x8909Dc15e40173Ff4699343b6eB8132c65e18eC6',\n  [ChainId.POLYGON]: '0x9e5A52f57b3038F1B8EeE45F28b3C1967e22799C',\n  [ChainId.CELO]: '0x79a530c8e2fA8748B7B40dd3629C0520c2cCf03f',\n  [ChainId.BLAST]: '0x5C346464d33F90bABaf70dB6388507CC889C1070',\n  [ChainId.ABSTRACT_TESTNET]: '0xcD87b21B627cB2d695FBc2101cf64F8007F25E07',\n  [ChainId.ZERO]: '0x1B4427e212475B12e62f0f142b8AfEf3BC18B559',\n  [ChainId.CYBER]: '0x8AdDa31FE63696Ac64DED7D0Ea208102b1358c44',\n  [ChainId.SHAPE]: '0xb411eAF2f2070822B26E372E3Ea63c5060BA45E6',\n  [ChainId.INK]: '0xfe57A6BA1951F69aE2Ed4abe23e0f095DF500C04',\n  [ChainId.ABSTRACT_MAINNET]: '0x566d7510dEE58360a64C9827257cF6D0Dc43985E',\n  [ChainId.ANIME_TESTNET]: '0x69f2888491eA07BB10936aA110A5E0481122efd3',\n}\n/**\n * @deprecated use V2_ROUTER_ADDRESSES instead\n */\nexport const V2_ROUTER_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D'\nexport const V2_ROUTER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.GOERLI]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n  [ChainId.ARBITRUM_ONE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.OPTIMISM]: '0x4a7b5da61326a6379179b40d00f57e5bbdc962c2',\n  [ChainId.BASE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.AVALANCHE]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.BNB]: '0x4752ba5dbc23f44d87826276bf6fd6b1c372ad24',\n  [ChainId.POLYGON]: '0xedf6066a2b290c185783862c7f4776a2c8077ad1',\n  [ChainId.BLAST]: '0xBB66Eb1c5e875933D44DAe661dbD80e5D9B03035',\n  [ChainId.ABSTRACT_TESTNET]: '0x96ff7D9dbf52FdcAe79157d3b249282c7FABd409',\n  [ChainId.ZERO]: '0xD7C05A08cB43e99d596B606A1c03EA2F21289d94',\n  [ChainId.CYBER]: '0x58C90b5Dbc69963Fb0CAbee1163747FDBB7A8b18',\n  [ChainId.SHAPE]: '0x1f79AD8a85f570514e06Ff51BBffD540cCaB1249',\n  [ChainId.INK]: '0xB3FB126ACDd5AdCA2f50Ac644a7a2303745f18b4',\n  [ChainId.ABSTRACT_MAINNET]: '0xad1eCa41E6F772bE3cb5A48A6141f9bcc1AF9F7c',\n  [ChainId.ANIME_TESTNET]: '0x4F9f253Cc262fC82baD2d25BC1Ea7c67544535e3',\n}\n\n// Networks that share most of the same addresses i.e. Mainnet, Goerli, Optimism, Arbitrum, Polygon\nconst DEFAULT_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x1F98431c8aD98523631AE4a59f267346ea31F984',\n  multicallAddress: '0x1F98415757620B543A52E61c46B32eB19261F984',\n  quoterAddress: '0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6',\n  v3MigratorAddress: '0xA5644E29708357803b5A882D272c41cC0dF92B34',\n  nonfungiblePositionManagerAddress: '0xC36442b4a4522E871399CD717aBDD847Ab11FE88',\n}\nconst MAINNET_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0x84E44095eeBfEC7793Cd7d5b57B7e401D7f1cA2E',\n}\nconst GOERLI_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  mixedRouteQuoterV1Address: '0xBa60b6e6fF25488308789E6e0A65D838be34194e',\n}\n\nconst OPTIMISM_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\nconst ARBITRUM_ONE_ADDRESSES: ChainAddresses = {\n  ...DEFAULT_ADDRESSES,\n  multicallAddress: '0xadF885960B47eA2CD9B55E6DAc6B42b7Cb2806dB',\n  tickLensAddress: '0xbfd8137f7d1516D3ea5cA83523914859ec47F573',\n}\nconst POLYGON_ADDRESSES: ChainAddresses = DEFAULT_ADDRESSES\n\n// celo v3 addresses\nconst CELO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xAfE208a311B21f13EF87E33A90049fC17A7acDEc',\n  multicallAddress: '0x633987602DE5C4F337e3DbF265303A1080324204',\n  quoterAddress: '0x82825d0554fA07f7FC52Ab63c961F330fdEFa8E8',\n  v3MigratorAddress: '0x3cFd4d48EDfDCC53D3f173F596f621064614C582',\n  nonfungiblePositionManagerAddress: '0x3d79EdAaBC0EaB6F08ED885C05Fc0B014290D95A',\n  tickLensAddress: '0x5f115D9113F88e0a0Db1b5033D90D4a9690AcD3D',\n}\n\n// BNB v3 addresses\nconst BNB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xdB1d10011AD0Ff90774D0C6Bb92e5C5c8b4461F7',\n  multicallAddress: '0x963Df249eD09c358A4819E39d9Cd5736c3087184',\n  quoterAddress: '0x78D78E420Da98ad378D7799bE8f4AF69033EB077',\n  v3MigratorAddress: '0x32681814957e0C13117ddc0c2aba232b5c9e760f',\n  nonfungiblePositionManagerAddress: '0x7b8A01B39D58278b5DE7e48c8449c9f4F5170613',\n  tickLensAddress: '0xD9270014D396281579760619CCf4c3af0501A47C',\n  swapRouter02Address: '0xB971eF87ede563556b2ED4b1C0b0019111Dd85d2',\n}\n\n// optimism goerli addresses\nconst OPTIMISM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xB656dA17129e7EB733A557f4EBc57B76CFbB5d10',\n  multicallAddress: '0x07F2D8a2a02251B62af965f22fC4744A5f96BCCd',\n  quoterAddress: '0x9569CbA925c8ca2248772A9A4976A516743A246F',\n  v3MigratorAddress: '0xf6c55fBe84B1C8c3283533c53F51bC32F5C7Aba8',\n  nonfungiblePositionManagerAddress: '0x39Ca85Af2F383190cBf7d7c41ED9202D27426EF6',\n  tickLensAddress: '0xe6140Bd164b63E8BfCfc40D5dF952f83e171758e',\n}\n\n// optimism sepolia addresses\nconst OPTIMISM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8CE191193D15ea94e11d327b4c7ad8bbE520f6aF',\n  multicallAddress: '0x80e4e06841bb76AA9735E0448cB8d003C0EF009a',\n  quoterAddress: '0x0FBEa6cf957d95ee9313490050F6A0DA68039404',\n  v3MigratorAddress: '0xE7EcbAAaA54D007A00dbb6c1d2f150066D69dA07',\n  nonfungiblePositionManagerAddress: '0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d',\n  tickLensAddress: '0xCb7f54747F58F8944973cea5b8f4ac2209BadDC5',\n  swapRouter02Address: '0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4',\n}\n\n// arbitrum goerli v3 addresses\nconst ARBITRUM_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4893376342d5D7b3e31d4184c08b265e5aB2A3f6',\n  multicallAddress: '0x8260CB40247290317a4c062F3542622367F206Ee',\n  quoterAddress: '0x1dd92b83591781D0C6d98d07391eea4b9a6008FA',\n  v3MigratorAddress: '0xA815919D2584Ac3F76ea9CB62E6Fd40a43BCe0C3',\n  nonfungiblePositionManagerAddress: '0x622e4726a167799826d1E1D150b076A7725f5D81',\n  tickLensAddress: '0xb52429333da969a0C79a60930a4Bf0020E5D1DE8',\n}\n\n// arbitrum sepolia v3 addresses\nconst ARBITRUM_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x248AB79Bbb9bC29bB72f7Cd42F17e054Fc40188e',\n  multicallAddress: '0x2B718b475e385eD29F56775a66aAB1F5cC6B2A0A',\n  quoterAddress: '0x2779a0CC1c3e0E44D2542EC3e79e3864Ae93Ef0B',\n  v3MigratorAddress: '0x398f43ef2c67B941147157DA1c5a868E906E043D',\n  nonfungiblePositionManagerAddress: '0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65',\n  tickLensAddress: '0x0fd18587734e5C2dcE2dccDcC7DD1EC89ba557d9',\n  swapRouter02Address: '0x101F443B4d1b059569D643917553c771E1b9663E',\n}\n\n// sepolia v3 addresses\nconst SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x0227628f3F023bb0B980b67D528571c95c6DaC1c',\n  multicallAddress: '0xD7F33bCdb21b359c8ee6F0251d30E94832baAd07',\n  quoterAddress: '0xEd1f6473345F45b75F8179591dd5bA1888cf2FB3',\n  v3MigratorAddress: '0x729004182cF005CEC8Bd85df140094b6aCbe8b15',\n  nonfungiblePositionManagerAddress: '0x1238536071E1c677A632429e3655c799b22cDA52',\n  tickLensAddress: '0xd7f33bcdb21b359c8ee6f0251d30e94832baad07',\n  swapRouter02Address: '0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E',\n  // TODO: ROUTE-277 - update deploy address once after quoter refactoring.\n  mixedRouteQuoterV2Address: '0xa8b0be287acB850952DE4287b84B7222cc654C09',\n}\n\n// Avalanche v3 addresses\nconst AVALANCHE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD',\n  multicallAddress: '0x0139141Cd4Ee88dF3Cdb65881D411bAE271Ef0C2',\n  quoterAddress: '0xbe0F5544EC67e9B3b2D979aaA43f18Fd87E6257F',\n  v3MigratorAddress: '0x44f5f1f5E452ea8d29C890E8F6e893fC0f1f0f97',\n  nonfungiblePositionManagerAddress: '0x655C406EBFa14EE2006250925e54ec43AD184f8B',\n  tickLensAddress: '0xEB9fFC8bf81b4fFd11fb6A63a6B0f098c6e21950',\n  swapRouter02Address: '0xbb00FF08d01D300023C629E8fFfFcb65A5a578cE',\n}\n\nconst BASE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x33128a8fC17869897dcE68Ed026d694621f6FDfD',\n  multicallAddress: '0x091e99cb1C49331a94dD62755D168E941AbD0693',\n  quoterAddress: '0x3d4e44Eb1374240CE5F1B871ab261CD16335B76a',\n  v3MigratorAddress: '0x23cF10b1ee3AdfCA73B0eF17C07F7577e7ACd2d7',\n  nonfungiblePositionManagerAddress: '0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1',\n  tickLensAddress: '0x0CdeE061c75D43c82520eD998C23ac2991c9ac6d',\n  swapRouter02Address: '0x2626664c2603336E57B271c5C0b26F421741e481',\n  mixedRouteQuoterV1Address: '0xe544efae946f0008ae9a8d64493efa7886b73776',\n}\n\n// Base Goerli v3 addresses\nconst BASE_GOERLI_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9323c1d6D800ed51Bd7C6B216cfBec678B7d0BC2',\n  multicallAddress: '0xB206027a9E0E13F05eBEFa5D2402Bab3eA716439',\n  quoterAddress: '0xedf539058e28E5937dAef3f69cEd0b25fbE66Ae9',\n  v3MigratorAddress: '0x3efe5d02a04b7351D671Db7008ec6eBA9AD9e3aE',\n  nonfungiblePositionManagerAddress: '0x3c61369ef0D1D2AFa70d8feC2F31C5D6Ce134F30',\n  tickLensAddress: '0x1acB873Ee909D0c98adB18e4474943249F931b92',\n  swapRouter02Address: '0x8357227D4eDc78991Db6FDB9bD6ADE250536dE1d',\n}\n\nconst ZORA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x7145F8aeef1f6510E92164038E1B6F8cB2c42Cbb',\n  multicallAddress: '0xA51c76bEE6746cB487a7e9312E43e2b8f4A37C15',\n  quoterAddress: '0x11867e1b3348F3ce4FcC170BC5af3d23E07E64Df',\n  v3MigratorAddress: '0x048352d8dCF13686982C799da63fA6426a9D0b60',\n  nonfungiblePositionManagerAddress: '0xbC91e8DfA3fF18De43853372A3d7dfe585137D78',\n  tickLensAddress: '0x209AAda09D74Ad3B8D0E92910Eaf85D2357e3044',\n  swapRouter02Address: '0x7De04c96BE5159c3b5CeffC82aa176dc81281557',\n}\n\nconst ZORA_SEPOLIA_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x4324A677D74764f46f33ED447964252441aA8Db6',\n  multicallAddress: '0xA1E7e3A69671C4494EC59Dbd442de930a93F911A',\n  quoterAddress: '0xC195976fEF0985886E37036E2DF62bF371E12Df0',\n  v3MigratorAddress: '0x65ef259b31bf1d977c37e9434658694267674897',\n  nonfungiblePositionManagerAddress: '0xB8458EaAe43292e3c1F7994EFd016bd653d23c20',\n  tickLensAddress: '0x23C0F71877a1Fc4e20A78018f9831365c85f3064',\n}\n\nconst ROOTSTOCK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xaF37EC98A00FD63689CF3060BF3B6784E00caD82',\n  multicallAddress: '0x996a9858cDfa45Ad68E47c9A30a7201E29c6a386',\n  quoterAddress: '0xb51727c996C68E60F598A923a5006853cd2fEB31',\n  v3MigratorAddress: '0x16678977CA4ec3DAD5efc7b15780295FE5f56162',\n  nonfungiblePositionManagerAddress: '0x9d9386c042F194B460Ec424a1e57ACDE25f5C4b1',\n  tickLensAddress: '0x55B9dF5bF68ADe972191a91980459f48ecA16afC',\n  swapRouter02Address: '0x0B14ff67f0014046b4b99057Aec4509640b3947A',\n}\n\nconst BLAST_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x792edAdE80af5fC680d96a2eD80A44247D2Cf6Fd',\n  multicallAddress: '0xdC7f370de7631cE9e2c2e1DCDA6B3B5744Cf4705',\n  quoterAddress: '0x6Cdcd65e03c1CEc3730AeeCd45bc140D57A25C77',\n  v3MigratorAddress: '0x15CA7043CD84C5D21Ae76Ba0A1A967d42c40ecE0',\n  nonfungiblePositionManagerAddress: '0xB218e4f7cF0533d4696fDfC419A0023D33345F28',\n  tickLensAddress: '0x2E95185bCdD928a3e984B7e2D6560Ab1b17d7274',\n  swapRouter02Address: '0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66',\n}\n\nconst ZKSYNC_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x8FdA5a7a8dCA67BBcDd10F02Fa0649A937215422',\n  multicallAddress: '0x0c68a7C72f074d1c45C16d41fa74eEbC6D16a65C',\n  quoterAddress: '0x8Cb537fc92E26d8EBBb760E632c95484b6Ea3e28',\n  v3MigratorAddress: '0x611841b24E43C4ACfd290B427a3D6cf1A59dac8E',\n  nonfungiblePositionManagerAddress: '0x0616e5762c1E7Dc3723c50663dF10a162D690a86',\n  tickLensAddress: '0xe10FF11b809f8EE07b056B452c3B2caa7FE24f89',\n  swapRouter02Address: '0x99c56385daBCE3E81d8499d0b8d0257aBC07E8A3',\n}\n\nconst ABSTRACT_TESTNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x2E17FF9b877661bDFEF8879a4B31665157a960F0',\n  multicallAddress: '0x84B11838e53f53DBc1fca7a6413cDd2c7Ab15DB8',\n  quoterAddress: '0xdE41045eb15C8352413199f35d6d1A32803DaaE2',\n  v3MigratorAddress: '0xf3C430AF1C9C18d414b5cf890BEc08789431b6Ed',\n  nonfungiblePositionManagerAddress: '0x069f199763c045A294C7913E64bA80E5F362A5d7',\n  tickLensAddress: '0x2EC62f97506E0184C423B01c525ab36e1c61f78A',\n  swapRouter02Address: '0xb9D4347d129a83cBC40499Cd4fF223dE172a70dF',\n}\n\nconst ZERO_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',\n  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',\n  quoterAddress: '0x22B98c8Bdfea8D928101eEC40Af634ff37804997',\n  v3MigratorAddress: '0x05eead9625966847d60774Cf2c3b004AfBC45314',\n  nonfungiblePositionManagerAddress: '0x5b15468dFD83cF9192082d4510034c9431bb05eB',\n  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',\n  swapRouter02Address: '0xD936711eABD2Ce52747d7122757316C7DFe3599b',\n}\n\nconst BOB_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xcb2436774C3e191c85056d248EF4260ce5f27A9D',\n  multicallAddress: '0x5d6b0f5335ec95cD2aB7E52f2A0750dd86502435',\n  quoterAddress: '0x6Aa54a43d7eEF5b239a18eed3Af4877f46522BCA',\n  // Missing migrator address for BOB, using a place holder for now\n  v3MigratorAddress: '0x0000000000000000000000000000000000000000',\n  nonfungiblePositionManagerAddress: '0x743E03cceB4af2efA3CC76838f6E8B50B63F184c',\n  tickLensAddress: '0xB3309C48F8407651D918ca3Da4C45DE40109E641',\n  swapRouter02Address: '0x807F4E281B7A3B324825C64ca53c69F0b418dE40',\n}\n\nconst CYBER_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x9701158fcF072c6852FD83B54D237e0cf5910C08',\n  multicallAddress: '0x906d6eB9CF8f64e100e44f8f491b833a8d40B530',\n  quoterAddress: '0xb7493d86A83eb7e4b57A3747013AaE82c907A58E',\n  v3MigratorAddress: '0xc4D8Afb323C316DD7c91ddd4f818d5aCCd0661E3',\n  nonfungiblePositionManagerAddress: '0xa5005349B7dcD9536832D97235675EF5Ae40f095',\n  tickLensAddress: '0x6cb5504B957625d01a88db4b27EAaFD5Ae4422b6',\n  swapRouter02Address: '0xdB4f0Db998BC1d429499fB11638fd3705E8e60Cc',\n}\nconst SHAPE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xeCf9288395797Da137f663a7DD0F0CDF918776F8',\n  multicallAddress: '0x356A450B32f5030ae7083702b86FaFbBe7490411',\n  quoterAddress: '0x5C5D397c5C5146559B709534dCDD81cB66617bBF',\n  v3MigratorAddress: '0x584d740230343ED1Ac23A54Dc13f0a5213d5A2B4',\n  nonfungiblePositionManagerAddress: '0xD29D14d0DbE2485E9f89305d5310CcD0D7a6DCb6',\n  tickLensAddress: '0x4372c608a10b760C12E82029E5D4445721Cf4A51',\n  swapRouter02Address: '0x32f6dCB405376B07b9D3d4C03015A5e329dD7D18',\n}\n\nconst INK_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x640887A9ba3A9C53Ed27D0F7e8246A4F933f3424',\n  multicallAddress: '0xA0fCec583AeE6176527C07B198e5561722332014',\n  quoterAddress: '0x96b572D2d880cf2Fa2563651BD23ADE6f5516652',\n  v3MigratorAddress: '0xdce28D2D5392e19091Fe59d9750B3202EbE80641',\n  nonfungiblePositionManagerAddress: '0xC0836E5B058BBE22ae2266e1AC488A1A0fD8DCE8',\n  tickLensAddress: '0x3e6Dba802d62aba2361Dd632fbC9f547AA6789aE',\n  swapRouter02Address: '0x177778F19E89dD1012BdBe603F144088A95C4B53',\n}\n\nconst REDSTONE_GARNET_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0x338F6033D373F610510e0F285637Ef5DDA776742',\n  multicallAddress: '0x320776fE9c8bed28dd6545A7B8e66114b7217153',\n  quoterAddress: '0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e',\n  v3MigratorAddress: '0x32d8273909300339d01c097E3A79eA522C0CCb47',\n  nonfungiblePositionManagerAddress: '0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9',\n  tickLensAddress: '0xe0e63e8a518b001A36FF8ac9F910CeC699D79c5A',\n  swapRouter02Address: '0xfB60447BF76d38A36A140a0e427C3f0787Eb3e80',\n}\n\nconst REDSTONE_ADDRESSES: ChainAddresses = {\n  v3CoreFactoryAddress: '0xece75613Aa9b1680f0421E5B2eF376DF68aa83Bb',\n  multicallAddress: '0xd57B52452a0FDfE3ff8e0A40Bd10D00D0bfe0723',\n  quoterAddress: '0x2986d9721A49838ab4297b695858aF7F17f38014',\n  v3MigratorAddress: '0xa46F04F08Ea3AA4e1D22dFEe7f1C014C85Fc2EF9',\n  nonfungiblePositionManagerAddress: '0x6Cdd7Ad7a1CacCe6163ed26BBA22E0A04dF41AD8',\n  tickLensAddress: '0x600749AA1c493aB8656AD3aeFd2Fd645C7Ba2CdA',\n  swapRouter02Address: '0xEBe5eAC00Dbbe2b26D1112399d3795f865cD268e',\n}\n\nconst ABSTRACT_MAINNET: ChainAddresses = {\n  v3CoreFactoryAddress: '0xA1160e73B63F322ae88cC2d8E700833e71D0b2a1',\n  multicallAddress: '0x9CA4dcb2505fbf536F6c54AA0a77C79f4fBC35C0',\n  quoterAddress: '0x728BD3eC25D5EDBafebB84F3d67367Cd9EBC7693',\n  v3MigratorAddress: '0x117Fc8DEf58147016f92bAE713533dDB828aBB7e',\n  nonfungiblePositionManagerAddress: '0xfA928D3ABc512383b8E5E77edd2d5678696084F9',\n  tickLensAddress: '0x9c7d30F93812f143b6Efa673DB8448EfCB9f747E',\n  swapRouter02Address: '0x7712FA47387542819d4E35A23f8116C90C18767C',\n}\n\nconst ANIME_TESTNET: ChainAddresses = {\n  v3CoreFactoryAddress: '0xE6eA2A148c13893a8eEDD57c75043055a8924C5f',\n  multicallAddress: '0x208960B3Bb6fa00bDcfa2cc9CdB8D412bbCe9f64',\n  quoterAddress: '0x623d6b580eAeCbfC22E3ced2233D5598CBBC37F0',\n  v3MigratorAddress: '0xc738ADA94944EC1d86C09c7204A428de35fb1CbF',\n  nonfungiblePositionManagerAddress: '0x1cFbE77bb62CEca3778769655dEEC3ECC6AaaDf7',\n  tickLensAddress: '0x086cD67c39646E95C1B9c4af4694Aa51A1a7636f',\n  swapRouter02Address: '0x1Ed23A4791a0D1E112a67f5F42fd61d03b9dc261',\n}\n\nexport const CHAIN_TO_ADDRESSES_MAP: Record<SupportedChainsType, ChainAddresses> = {\n  [ChainId.MAINNET]: MAINNET_ADDRESSES,\n  [ChainId.OPTIMISM]: OPTIMISM_ADDRESSES,\n  [ChainId.ARBITRUM_ONE]: ARBITRUM_ONE_ADDRESSES,\n  [ChainId.POLYGON]: POLYGON_ADDRESSES,\n  [ChainId.POLYGON_MUMBAI]: POLYGON_ADDRESSES,\n  [ChainId.GOERLI]: GOERLI_ADDRESSES,\n  [ChainId.CELO]: CELO_ADDRESSES,\n  [ChainId.CELO_ALFAJORES]: CELO_ADDRESSES,\n  [ChainId.BNB]: BNB_ADDRESSES,\n  [ChainId.OPTIMISM_GOERLI]: OPTIMISM_GOERLI_ADDRESSES,\n  [ChainId.OPTIMISM_SEPOLIA]: OPTIMISM_SEPOLIA_ADDRESSES,\n  [ChainId.ARBITRUM_GOERLI]: ARBITRUM_GOERLI_ADDRESSES,\n  [ChainId.ARBITRUM_SEPOLIA]: ARBITRUM_SEPOLIA_ADDRESSES,\n  [ChainId.SEPOLIA]: SEPOLIA_ADDRESSES,\n  [ChainId.AVALANCHE]: AVALANCHE_ADDRESSES,\n  [ChainId.BASE]: BASE_ADDRESSES,\n  [ChainId.BASE_GOERLI]: BASE_GOERLI_ADDRESSES,\n  [ChainId.ZORA]: ZORA_ADDRESSES,\n  [ChainId.ZORA_SEPOLIA]: ZORA_SEPOLIA_ADDRESSES,\n  [ChainId.ROOTSTOCK]: ROOTSTOCK_ADDRESSES,\n  [ChainId.BLAST]: BLAST_ADDRESSES,\n  [ChainId.ZKSYNC]: ZKSYNC_ADDRESSES,\n  [ChainId.ABSTRACT_TESTNET]: ABSTRACT_TESTNET_ADDRESSES,\n  [ChainId.ZERO]: ZERO_ADDRESSES,\n  [ChainId.BOB]: BOB_ADDRESSES,\n  [ChainId.CYBER]: CYBER_ADDRESSES,\n  [ChainId.SHAPE]: SHAPE_ADDRESSES,\n  [ChainId.INK]: INK_ADDRESSES,\n  [ChainId.REDSTONE_GARNET]: REDSTONE_GARNET_ADDRESSES,\n  [ChainId.REDSTONE]: REDSTONE_ADDRESSES,\n  [ChainId.ABSTRACT_MAINNET]: ABSTRACT_MAINNET,\n  [ChainId.ANIME_TESTNET]: ANIME_TESTNET,\n}\n\n/* V3 Contract Addresses */\nexport const V3_CORE_FACTORY_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].v3CoreFactoryAddress\n    return memo\n  }, {}),\n}\n\nexport const V3_MIGRATOR_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const v3MigratorAddress = CHAIN_TO_ADDRESSES_MAP[chainId].v3MigratorAddress\n    if (v3MigratorAddress) {\n      memo[chainId] = v3MigratorAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MULTICALL_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].multicallAddress\n    return memo\n  }, {}),\n}\n\n/**\n * The oldest V0 governance address\n */\nexport const GOVERNANCE_ALPHA_V0_ADDRESSES: AddressMap = constructSameAddressMap(\n  '0x5e4be8Bc9637f0EAA1A755019e06A68ce081D58F'\n)\n/**\n * The older V1 governance address\n */\nexport const GOVERNANCE_ALPHA_V1_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0xC4e172459f1E7939D522503B81AFAaC1014CE6F6',\n}\n/**\n * The latest governor bravo that is currently admin of timelock\n */\nexport const GOVERNANCE_BRAVO_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x408ED6354d4973f66138C91495F2f2FCbd8724C3',\n}\n\nexport const TIMELOCK_ADDRESSES: AddressMap = constructSameAddressMap('0x1a9C8182C09F50C8318d769245beA52c32BE35BC')\n\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0x090D4613473dEE047c3f2706764f49E0821D256e',\n}\n\nexport const ARGENT_WALLET_DETECTOR_ADDRESS: AddressMap = {\n  [ChainId.MAINNET]: '0xeca4B0bDBf7c55E9b7925919d03CbF8Dc82537E8',\n}\n\nexport const QUOTER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    memo[chainId] = CHAIN_TO_ADDRESSES_MAP[chainId].quoterAddress\n    return memo\n  }, {}),\n}\n\nexport const NONFUNGIBLE_POSITION_MANAGER_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const nonfungiblePositionManagerAddress = CHAIN_TO_ADDRESSES_MAP[chainId].nonfungiblePositionManagerAddress\n    if (nonfungiblePositionManagerAddress) {\n      memo[chainId] = nonfungiblePositionManagerAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const ENS_REGISTRAR_ADDRESSES: AddressMap = {\n  ...constructSameAddressMap('0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'),\n}\n\nexport const SOCKS_CONTROLLER_ADDRESSES: AddressMap = {\n  [ChainId.MAINNET]: '0x65770b5283117639760beA3F867b69b3697a91dd',\n}\n\nexport const TICK_LENS_ADDRESSES: AddressMap = {\n  ...SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n    const tickLensAddress = CHAIN_TO_ADDRESSES_MAP[chainId].tickLensAddress\n    if (tickLensAddress) {\n      memo[chainId] = tickLensAddress\n    }\n    return memo\n  }, {}),\n}\n\nexport const MIXED_ROUTE_QUOTER_V1_ADDRESSES: AddressMap = SUPPORTED_CHAINS.reduce<AddressMap>((memo, chainId) => {\n  const mixedRouteQuoterV1Address = CHAIN_TO_ADDRESSES_MAP[chainId].mixedRouteQuoterV1Address\n  if (mixedRouteQuoterV1Address) {\n    memo[chainId] = mixedRouteQuoterV1Address\n  }\n  return memo\n}, {})\n\nexport const SWAP_ROUTER_02_ADDRESSES = (chainId: number) => {\n  if (SUPPORTED_CHAINS.includes(chainId)) {\n    const id = chainId as SupportedChainsType\n    return CHAIN_TO_ADDRESSES_MAP[id].swapRouter02Address ?? '0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45'\n  }\n  return ''\n}\n","import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n\n// Checks a string starts with 0x, is 42 characters long and contains only hex characters after 0x\nconst startsWith0xLen42HexRegex = /^0x[0-9a-fA-F]{40}$/\n\n/**\n * Checks if an address is valid by checking 0x prefix, length === 42 and hex encoding.\n * @param address the unchecksummed hex address\n */\nexport function checkValidAddress(address: string): string {\n  if (startsWith0xLen42HexRegex.test(address)) {\n    return address\n  }\n\n  throw new Error(`${address} is not a valid address.`)\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { checkValidAddress, validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  /**\n   * Relevant for fee-on-transfer (FOT) token taxes,\n   * Not every ERC20 token is FOT token, so this field is optional\n   */\n  public readonly buyFeeBps?: BigNumber\n  public readonly sellFeeBps?: BigNumber\n\n  /**\n   *\n   * @param chainId {@link BaseCurrency#chainId}\n   * @param address The contract address on the chain on which this token lives\n   * @param decimals {@link BaseCurrency#decimals}\n   * @param symbol {@link BaseCurrency#symbol}\n   * @param name {@link BaseCurrency#name}\n   * @param bypassChecksum If true it only checks for length === 42, startsWith 0x and contains only hex characters\n   * @param buyFeeBps Buy fee tax for FOT tokens, in basis points\n   * @param sellFeeBps Sell fee tax for FOT tokens, in basis points\n   */\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    bypassChecksum?: boolean,\n    buyFeeBps?: BigNumber,\n    sellFeeBps?: BigNumber\n  ) {\n    super(chainId, decimals, symbol, name)\n    if (bypassChecksum) {\n      this.address = checkValidAddress(address)\n    } else {\n      this.address = validateAndParseAddress(address)\n    }\n    if (buyFeeBps) {\n      invariant(buyFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    if (sellFeeBps) {\n      invariant(sellFeeBps.gte(BigNumber.from(0)), 'NON-NEGATIVE FOT FEES')\n    }\n    this.buyFeeBps = buyFeeBps\n    this.sellFeeBps = sellFeeBps\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address.toLowerCase() === other.address.toLowerCase()\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address.toLowerCase() !== other.address.toLowerCase(), 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  3: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  4: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  5: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  42: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  10: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  69: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  11155420: new Token(11155420, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  42161: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  421611: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'),\n  421614: new Token(421614, '0x980B62Da83eFf3D4576C647993b0c1D7faf17c73', 18, 'WETH', 'Wrapped Ether'),\n\n  8453: new Token(8453, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  56: new Token(56, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  137: new Token(137, '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270', 18, 'WMATIC', 'Wrapped MATIC'),\n  43114: new Token(43114, '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7', 18, 'WAVAX', 'Wrapped AVAX'),\n  324: new Token(324, '0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91', 18, 'WETH', 'Wrapped Ether'),\n  11124: new Token(11124, '0x9EDCde0257F2386Ce177C3a7FCdd97787F0D841d', 18, 'WETH', 'Wrapped Ether'),\n  543210: new Token(543210, '0xAc98B49576B1C892ba6BFae08fE1BB0d80Cf599c', 18, 'WETH', 'Wrapped Ether'),\n  60808: new Token(60808, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  7560: new Token(7560, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  360: new Token(360, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  57073: new Token(57073, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  690: new Token(690, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  17069: new Token(17069, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  2741: new Token(2741, '0x3439153EB7AF838Ad19d56E1571FBD09333C2809', 18, 'WETH', 'Wrapped Ether'),\n  6900: new Token(6900, '0x8f3e2785985aa4005c63f97f7cc89ce91a948267', 18, 'WETH', 'Wrapped Ether'),\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import { getAddress } from '@ethersproject/address'\nimport { BytesLike, concat, hexZeroPad } from '@ethersproject/bytes'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport { toUtf8Bytes } from '@ethersproject/strings'\n\nexport function computeZksyncCreate2Address(\n  sender: string,\n  bytecodeHash: BytesLike,\n  salt: BytesLike,\n  input: BytesLike = '0x'\n) {\n  const prefix = keccak256(toUtf8Bytes('zksyncCreate2'))\n  const inputHash = keccak256(input)\n  const addressBytes = keccak256(concat([prefix, hexZeroPad(sender, 32), salt, bytecodeHash, inputHash])).slice(26)\n  return getAddress(addressBytes)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["ChainId","SUPPORTED_CHAINS","MAINNET","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_SEPOLIA","ARBITRUM_ONE","ARBITRUM_GOERLI","ARBITRUM_SEPOLIA","POLYGON","POLYGON_MUMBAI","GOERLI","SEPOLIA","CELO_ALFAJORES","CELO","BNB","AVALANCHE","BASE","BASE_GOERLI","ZORA","ZORA_SEPOLIA","ROOTSTOCK","BLAST","ZKSYNC","ABSTRACT_TESTNET","ZERO","BOB","CYBER","SHAPE","INK","REDSTONE_GARNET","REDSTONE","ABSTRACT_MAINNET","ANIME_TESTNET","NativeCurrencyName","DEFAULT_NETWORKS","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId","UNI_ADDRESSES","UNISWAP_NFT_AIRDROP_CLAIM_ADDRESS","V2_FACTORY_ADDRESS","V2_FACTORY_ADDRESSES","_V2_FACTORY_ADDRESSES","V2_ROUTER_ADDRESS","V2_ROUTER_ADDRESSES","_V2_ROUTER_ADDRESSES","DEFAULT_ADDRESSES","v3CoreFactoryAddress","multicallAddress","quoterAddress","v3MigratorAddress","nonfungiblePositionManagerAddress","MAINNET_ADDRESSES","_extends","mixedRouteQuoterV1Address","GOERLI_ADDRESSES","OPTIMISM_ADDRESSES","ARBITRUM_ONE_ADDRESSES","tickLensAddress","POLYGON_ADDRESSES","CELO_ADDRESSES","BNB_ADDRESSES","swapRouter02Address","OPTIMISM_GOERLI_ADDRESSES","OPTIMISM_SEPOLIA_ADDRESSES","ARBITRUM_GOERLI_ADDRESSES","ARBITRUM_SEPOLIA_ADDRESSES","SEPOLIA_ADDRESSES","mixedRouteQuoterV2Address","AVALANCHE_ADDRESSES","BASE_ADDRESSES","BASE_GOERLI_ADDRESSES","ZORA_ADDRESSES","ZORA_SEPOLIA_ADDRESSES","ROOTSTOCK_ADDRESSES","BLAST_ADDRESSES","ZKSYNC_ADDRESSES","ABSTRACT_TESTNET_ADDRESSES","ZERO_ADDRESSES","BOB_ADDRESSES","CYBER_ADDRESSES","SHAPE_ADDRESSES","INK_ADDRESSES","REDSTONE_GARNET_ADDRESSES","REDSTONE_ADDRESSES","CHAIN_TO_ADDRESSES_MAP","_CHAIN_TO_ADDRESSES_M","V3_CORE_FACTORY_ADDRESSES","V3_MIGRATOR_ADDRESSES","MULTICALL_ADDRESSES","GOVERNANCE_ALPHA_V0_ADDRESSES","GOVERNANCE_ALPHA_V1_ADDRESSES","_GOVERNANCE_ALPHA_V1_","GOVERNANCE_BRAVO_ADDRESSES","_GOVERNANCE_BRAVO_ADD","TIMELOCK_ADDRESSES","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","ARGENT_WALLET_DETECTOR_ADDRESS","_ARGENT_WALLET_DETECT","QUOTER_ADDRESSES","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","ENS_REGISTRAR_ADDRESSES","SOCKS_CONTROLLER_ADDRESSES","_SOCKS_CONTROLLER_ADD","TICK_LENS_ADDRESSES","MIXED_ROUTE_QUOTER_V1_ADDRESSES","SWAP_ROUTER_02_ADDRESSES","includes","_CHAIN_TO_ADDRESSES_M2","id","TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","prototype","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","process","env","NODE_ENV","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","_inheritsLoose","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","symbol","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","startsWith0xLen42HexRegex","checkValidAddress","test","Token","bypassChecksum","buyFeeBps","sellFeeBps","gte","BigNumber","from","toLowerCase","sortsBefore","WETH9","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","computeZksyncCreate2Address","sender","bytecodeHash","salt","input","prefix","keccak256","toUtf8Bytes","inputHash","addressBytes","hexZeroPad","slice","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}
\ No newline at end of file
